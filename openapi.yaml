openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Sign API #########################

  "/v0.1/signature/validate":
    post:
      tags:
        - signature-controller
      description: "Validation of the order signature"
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignatureValidationForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Currency API #########################

  "/v0.1/currency/rate/usd":
    get:
      deprecated: true
      tags:
        - currency-controller
      description: "Get currency USD rate"
      operationId: getCurrencyUsdRate
      parameters:
        - name: blockchain
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            "$ref": "#/components/schemas/Blockchain"
        - name: address
          in: query
          required: true
          description: "Address of the currency"
          schema:
            type: string
        - name: at
          in: query
          required: true
          description: "Date and time for getting currency USD rate"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyUsdRate"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/currencies/{currencyId}/rates/usd":
    get:
      tags:
        - currency-controller
      description: "Get currency USD rate by currency id"
      operationId: getCurrencyUsdRateByCurrencyId
      parameters:
        - name: "currencyId"
          in: path
          required: true
          description: "Currency Id, has format `${blockchain}:${token}` or `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/CurrencyId"
        - name: at
          in: query
          required: true
          description: "Date and time for getting currency USD rate"
          example: "2022-01-01T12:00:00Z"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyUsdRate"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/currencies/all":
    get:
      tags:
        - currency-controller
      description: "Get all registered currencies"
      operationId: getAllCurrencies
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currencies"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Item API #########################

  /v0.1/items/{itemId}:
    get:
      tags:
        - item-controller
      description: "Returns Item by Id"
      operationId: getItemById
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byIds:
    post:
      tags:
        - item-controller
      description: "Returns Items by Ids"
      operationId: getItemByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/items/{itemId}/royalties":
    get:
      tags:
        - item-controller
      description: Returns item royalty by identifier
      operationId: getItemRoyaltiesById
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Royalties"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/items/{itemId}/resetMeta":
    delete:
      tags:
        - item-controller
      description: "Deletes the NFT item meta by Id"
      operationId: resetItemMeta
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "sync"
          in: query
          required: false
          description: "Request meta for Item if true"
          schema:
            type: boolean

      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/{itemId}/checkRestriction:
    post:
      tags:
        - item-controller
      description: "Check restrictions for specified user and action with item"
      operationId: checkItemRestriction
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestrictionCheckForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestrictionCheckResult"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byOwner:
    get:
      tags:
        - item-controller
      description: "Returns Item by owner"
      operationId: getItemsByOwner
      parameters:
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "owner"
          in: query
          required: true
          description: "Address of the item owner"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byCreator:
    get:
      tags:
        - item-controller
      description: "Returns Item by creator"
      operationId: getItemsByCreator
      parameters:
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "creator"
          in: query
          required: true
          description: "Address of the item creator"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byCollection:
    get:
      tags:
        - item-controller
      description: "Returns items by collection"
      operationId: getItemsByCollection
      parameters:
        - name: "collection"
          in: query
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byOwnerWithOwnership:
    get:
      tags:
        - item-controller
      description: "Returns items by owner with ownership"
      operationId: getItemsByOwnerWithOwnership
      parameters:
        - name: "owner"
          in: query
          required: true
          description: "Address of the owner"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsWithOwnership"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/all:
    get:
      deprecated: true
      tags:
        - item-controller
      description: "Returns all items"
      operationId: getAllItems
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "showDeleted"
          in: query
          required: false
          description: "Include deleted items"
          schema:
            type: boolean
        - name: "lastUpdatedFrom"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated after this date (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "lastUpdatedTo"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated before this date (timestamp)"
          schema:
            type: integer
            format: "int64"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/traits:
    get:
      tags:
        - item-controller
      operationId: queryTraits
      description: "Returns possible trait values by key"
      parameters:
        - name: keys
          description: Trait keys
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: "${filterTraitKey}"
        - name: collectionIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: "${filterCollections}"
          description: Collections identifiers to which traits belong
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Traits'
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/traits/search:
    get:
      tags:
        - item-controller
      description: "Returns combination of Item attribute key with list of values"
      operationId:  searchTraits
      parameters:
        - name: filter
          description: filter
          in: query
          required: true
          schema:
            type: string
            example: "${filterTraitKey}"
        - name: collectionIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              example: "${filterCollections}"
          description: Collections identifiers to which traits belong
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Traits'
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/traits/rarity:
    post:
      tags:
        - item-controller
      description: "Returns the rarity of the trait"
      operationId: queryTraitsWithRarity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraitsRarityRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedTraitProperties'

  /v0.1/items/search:
    post:
      tags:
        - item-controller
      description: "Complex search for items"
      operationId: searchItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsSearchRequest"
        required: true
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Ownership API #######################

  /v0.1/ownerships/{ownershipId}:
    get:
      tags:
        - ownership-controller
      description: "Returns ownership by Id"
      operationId: getOwnershipById
      parameters:
        - name: "ownershipId"
          in: path
          required: true
          description: "Ownership Id in format: '${blockchain}:${token}:${tokenId}:${owner}'"
          schema:
            $ref: "#/components/schemas/OwnershipId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownership"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/ownerships/byIds:
    post:
      tags:
        - ownership-controller
      description: "Returns Ownerships by Ids"
      operationId: getOwnershipsByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnershipIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownerships"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/ownerships/byItem:
    get:
      tags:
        - ownership-controller
      description: "Returns ownerships by item"
      operationId: getOwnershipsByItem
      parameters:
        - name: "itemId"
          in: query
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownerships"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/ownerships/search:
    post:
      tags:
        - ownership-controller
      description: "Complex ownerships search"
      operationId: searchOwnerships
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OwnershipSearchRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownerships"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Order API ########################

  /v0.1/orders/{id}:
    get:
      tags:
        - order-controller
      description: "Returns order by Id"
      operationId: getOrderById
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Order Id, has format '${blockchain}:${id}'"
          schema:
            $ref: "#/components/schemas/OrderId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byIds":
    post:
      tags:
        - order-controller
      description: "Returns the orders that have been put on sale"
      operationId: getOrdersByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/all:
    get:
      tags:
        - order-controller
      description: "Returns all orders"
      operationId: getOrdersAll
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Type of the blockchain network"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Order sort"
          schema:
            $ref: "#/components/schemas/OrderSort"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sync:
    get:
      tags:
        - order-controller
      description: "Returns all orders sorting by data base update"
      operationId: getAllSync
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Order sort"
          schema:
            $ref: "#/components/schemas/SyncSort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell/byMaker:
    get:
      tags:
        - order-controller
      description: "Returns sell orders by maker"
      operationId: getSellOrdersByMaker
      parameters:
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: platform
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "maker"
          in: query
          required: true
          description: "The maker of the order"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell/byItem:
    get:
      tags:
        - order-controller
      description: "Returns sell orders by item"
      operationId: getSellOrdersByItem
      parameters:
        - name: "platform"
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "itemId"
          in: query
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "maker"
          in: query
          required: false
          description: "The maker of the bid"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell:
    get:
      tags:
        - order-controller
      description: "Returns all sell orders"
      operationId: getSellOrders
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "platform"
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/bids/byMaker:
    get:
      tags:
        - order-controller
      description: "Returns order bids by maker"
      operationId: getOrderBidsByMaker
      parameters:
        - name: "maker"
          in: query
          required: true
          description: "The maker of the bid"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UnionAddress"
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: platform
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "start"
          in: query
          required: false
          description: "Lower time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "end"
          in: query
          required: false
          description: "Upper time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/bids/byItem:
    get:
      tags:
        - order-controller
      description: "Returns order bids by item"
      operationId: getOrderBidsByItem
      parameters:
        - name: platform
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "itemId"
          in: query
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "maker"
          in: query
          required: false
          description: "The maker of the bid"
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "start"
          in: query
          required: false
          description: "Lower time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "end"
          in: query
          required: false
          description: "Upper time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Auction API ########################

  "/v0.1/auctions/{id}":
    get:
      tags:
        - auction-controller
      description: Returns the auction by id
      operationId: getAuctionById
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Auction Id, has format `${blockchain}:${id}`"
          schema:
            $ref: "#/components/schemas/AuctionId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auction"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/auctions/all":
    get:
      tags:
        - auction-controller
      description: Returns all auctions by specified parameters
      operationId: getAuctionsAll
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: sort
          description: "Sorting by target criteria"
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/AuctionSort"
        - name: status
          description: "The auction statuses"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuctionStatus"
        - name: origin
          description: "Address of the consumer to receive the commission for auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: platform
          description: "The platform where the auction was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of auctions to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auctions"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/auctions/bySeller":
    get:
      tags:
        - auction-controller
      operationId: getAuctionsBySeller
      description: Returns all auctions by seller
      parameters:
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: seller
          description: "The seller of the auction"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: status
          description: "The auction statuses"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuctionStatus"
        - name: origin
          description: "Address of the consumer to receive the commission for auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: platform
          description: "The platform where the auction was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auctions"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/auctions/byItem":
    get:
      tags:
        - auction-controller
      operationId: getAuctionsByItem
      description: Returns all auctions by item
      parameters:
        - name: "itemId"
          in: query
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: seller
          description: "The seller of the auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: sort
          description: "Sorting by target criteria"
          in: query
          required: false
          schema:
            "$ref": "#/components/schemas/AuctionSort"
        - name: origin
          description: "Address of the consumer to receive the commission for auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: status
          description: "The auction statuses"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuctionStatus"
        - name: platform
          description: "The platform where the auction was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auctions"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/auctions/byCollection":
    get:
      tags:
        - auction-controller
      operationId: getAuctionsByCollection
      description: Returns all auctions by collection
      parameters:
        - name: contract
          description: "Address of the NFT collection"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: seller
          description: "The seller of the auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: origin
          description: "Address of the consumer to receive the commission for auction"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: status
          description: "The auctions statuses"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuctionStatus"
        - name: platform
          description: "The platform where the auction was created"
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Platform"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of items to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auctions"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/auctions/{id}/bids":
    get:
      tags:
        - auction-controller
      operationId: getAuctionBidsById
      description: Returns all auction bids by auction id
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Auction Id, has format `${blockchain}:${id}`"
          schema:
            $ref: "#/components/schemas/AuctionId"
        - name: continuation
          description: "Continuation token from the previous response"
          in: query
          required: false
          schema:
            type: string
        - name: size
          description: "The number of bids to return"
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionBids"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Activity API ########################

  /v0.1/activities/byUser:
    get:
      tags:
        - activity-controller
      description: "Returns activities by user"
      deprecated: true
      operationId: getActivitiesByUser
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/UserActivityType"
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "user"
          in: query
          required: true
          description: "Addresses of the users"
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/UnionAddress"
        - name: "from"
          in: query
          required: false
          description: "Lower time border of data"
          schema:
            type: string
            format: "date-time"
        - name: "to"
          in: query
          required: false
          description: "Upper time border of data"
          schema:
            type: string
            format: "date-time"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "cursor"
          in: query
          required: false
          description: "Combined continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byUsers:
    post:
      tags:
        - activity-controller
      description: "Returns activities by users"
      operationId: getActivitiesByUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ActivitiesByUsersRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byItem:
    get:
      tags:
        - activity-controller
      description: "Returns activities by item"
      operationId: getActivitiesByItem
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "itemId"
          in: query
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "cursor"
          in: query
          required: false
          description: "Combined continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: sort
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byCollection:
    get:
      tags:
        - activity-controller
      description: "Returns activities by collection"
      operationId: getActivitiesByCollection
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "collection"
          in: query
          required: true
          description: "Address of the collection"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ContractAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "cursor"
          in: query
          required: false
          description: "Combined continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/sync:
    get:
      tags:
        - activity-controller
      description: "Returns all activities sorting by data base update"
      operationId: getAllActivitiesSync
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data base update time"
          schema:
            "$ref": "#/components/schemas/SyncSort"
        - name: "type"
          in: query
          required: false
          description: "Filtering by activity type"
          schema:
            "$ref": "#/components/schemas/SyncType"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/all:
    get:
      tags:
        - activity-controller
      description: "Returns all activities"
      operationId: getAllActivities
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "cursor"
          in: query
          required: false
          description: "Combined continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
        - name: "searchEngine"
          in: query
          required: false
          deprecated: true
          description: "Search engine to use for search"
          schema:
            $ref: "#/components/schemas/SearchEngine"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Collection API #######################

  /v0.1/collections/{collection}:
    get:
      tags:
        - collection-controller
      description: "Returns collection by address"
      operationId: getCollectionById
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/collections/{collection}/refreshMeta":
    delete:
      tags:
        - collection-controller
      description: "Refreshes metadata for all items in the NFT collection"
      operationId: refreshCollectionMeta
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/byOwner:
    get:
      tags:
        - collection-controller
      description: "Returns collection by owner"
      operationId: getCollectionsByOwner
      parameters:
        - name: "blockchains"
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "owner"
          in: query
          description: "Owner of searching collections"
          required: true
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/all:
    get:
      tags:
        - collection-controller
      description: "Returns all collections"
      operationId: getAllCollections
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Statistics API #######################

  "/v0.1/data/trending/collections":
    get:
      tags:
        - data-controller
      description: |
        Trending collection list. Sorted by special score, calculated in the following way: 
        gmv * (<amount of transaction change percentage comparing to previous period> - 1) / 10000
      operationId: getTrendingCollection
      parameters:
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: period
          in: query
          description: "Time period of trending statistics. Default: D7"
          required: false
          schema:
            "$ref": "#/components/schemas/OlapPeriod"
        - name: limit
          in: query
          description: Limit of records in trending statistics
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OlapTrendingCollectionEntry"
              example:
                - id: ETHEREUM:0xd8a5d498ab43ed060cb6629b97a19e3e4276dd9f
                  numberOfSales:
                    value: 4847
                    changePercent: 1785.9922178988327
                  volumeUsd:
                    currency: USD
                    value: 6353514.679736262
                    changePercent: 2415.324967987071
                  volumeNative:
                    currency: ETH
                    value: 3095.884291383326
                  floorPrice:
                    currency: ETH
                    value: 0.5749
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/rarible/statistics":
    get:
      tags:
        - data-controller
      description: |
        Rarible-related statistics. Amount of items listed and sold on rarible platform and amount of minted items over 
        all blockchains and all supported marketplaces
      operationId: getRaribleStats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapRaribleStatisticsResponse"
              example:
                sold: 434191371
                minted: 150477545
                listed: 145290
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/leaderboards/{entity}":
    get:
      tags:
        - data-controller
      description: Users (top buyers/sellers) leaderboard. Calculated as traded worth for the period.
      operationId: getUserLeaderboard
      parameters:
        - name: entity
          in: path
          description: Type of users in leaderboard
          required: true
          schema:
            "$ref": "#/components/schemas/OlapUserType"
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: source
          in: query
          description: Source
          required: false
          schema:
            "$ref": "#/components/schemas/OlapPlatformSource"
        - name: period
          in: query
          description: "Time period of leaderboard. Default: D7"
          required: false
          schema:
            $ref: '#/components/schemas/OlapPeriod'
        - name: limit
          in: query
          description: Limit of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OlapUserLeaderboardEntry"
              example:
                - id: ETHEREUM:0xf1fa9ceb517f67646c9063f315f8b70cf26aa4e8
                  volumeUsd:
                    currency: USD
                    value: 18172788.19333184
                  volumeNative:
                    currency: MATIC
                    value: 27343817.491841666
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/leaderboards/collections/mints":
    get:
      tags:
        - data-controller
      description: Collections leaderboard based on mint activity
      operationId: getCollectionMintsLeaderboard
      parameters:
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: period
          in: query
          description: Time period of leaderboard
          required: false
          schema:
            $ref: '#/components/schemas/OlapLeaderboardPeriod'
        - name: sort
          in: query
          description: Leaderboard sorting
          required: false
          schema:
            $ref: '#/components/schemas/OlapMintsLeaderboardSort'
        - name: limit
          in: query
          description: Limit of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: Offset of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OlapCollectionMintsLeaderboardEntry'
              example:
                - id: ETHEREUM:0x7e89a5e47cfdafd547ae8b2bc89590e0608941ae
                  minted: 1077
                  totalItemSupply: 1992
                  floorPrice:
                    currency: ETH
                    value: 0.0021
                - id: ETHEREUM:0x5e6dd7b71bff0f893cef2045819bb6095bd17e80
                  minted: 607
                  totalItemSupply: 607
                  floorPrice: null
                - id: ETHEREUM:0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85
                  minted: 178
                  totalItemSupply: 1984031
                  floorPrice:
                    currency: ETH
                    value: 5.295908E-22
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
              example:
                code: INVALID_INPUT
                message: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
              example:
                code: UNKNOWN
                message: Unknown error
  "/v0.1/data/rankings/collections/mints":
    get:
      tags:
        - data-controller
      description: Collections leaderboard based on mint activity
      operationId: getCollectionRankingByMints
      parameters:
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: period
          in: query
          description: Time period of leaderboard
          required: false
          schema:
            $ref: '#/components/schemas/OlapLeaderboardPeriod'
        - name: sort
          in: query
          description: Leaderboard sorting
          required: false
          schema:
            $ref: '#/components/schemas/OlapMintsLeaderboardSort'
        - name: limit
          in: query
          description: Limit of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: continuation
          in: query
          description: Page reference. Taken from previous response
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapCollectionMintsRankingResponse"
              example:
                continuation: 45325.07_ETHEREUM:0xe8f88d16f24255fcfab25959705d724406d67d9d
                result:
                  - id: ETHEREUM:0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85
                    minted: 178
                    totalItemSupply: 1984031
                    floorPrice:
                      currency: ETH
                      value: 5.295908E-22
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/leaderboards/collections":
    get:
      tags:
        - data-controller
      description: Collections leaderboard by trade activity
      operationId: getCollectionLeaderboard
      deprecated: true
      parameters:
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: ids
          in: query
          description: Collection ids
          required: false
          schema:
            type: array
            items:
              type: string
        - name: period
          in: query
          description: Time period of leaderboard
          required: false
          schema:
            $ref: '#/components/schemas/OlapLeaderboardPeriod'
        - name: minFloorPriceNative
          in: query
          description: Show collections which floor price (native currency) more or equal than specified value
          required: false
          schema:
            type: number
            format: bigdecimal
        - name: maxFloorPriceNative
          in: query
          description: Show collections which floor price (native currency) less or equal than specified value
          required: false
          schema:
            type: number
            format: bigdecimal
        - name: sort
          in: query
          description: Leaderboard sorting
          required: false
          schema:
            "$ref": "#/components/schemas/OlapTradesLeaderboardSort"
        - name: limit
          in: query
          description: Limit of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: Offset of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/OlapCollectionLeaderboardEntry"
              example:
                - id: ETHEREUM:0xe8f88d16f24255fcfab25959705d724406d67d9d
                  volumeUsd:
                    currency: USD
                    value: 45325.07
                    changePercent: -51.196335
                  volumeNative:
                    currency: ETH
                    value: 23.95
                  itemsBought: 1
                  floorPrice:
                    currency: ETH
                    value: 24.0
                  listed: 33
                  totalItemSupply: 250
                  ownersCount: 187
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/rankings/collections/volume":
    get:
      tags:
        - data-controller
      description: Collections leaderboard by trade activity
      operationId: getCollectionRankingByVolume
      parameters:
        - name: blockchain
          in: query
          description: Blockchain
          required: false
          schema:
            "$ref": "#/components/schemas/OlapBlockchain"
        - name: ids
          in: query
          description: Collection ids
          required: false
          schema:
            type: array
            items:
              type: string
        - name: period
          in: query
          description: Time period for aggregation
          required: false
          schema:
            $ref: '#/components/schemas/OlapLeaderboardPeriod'
        - name: minFloorPriceNative
          in: query
          description: Show collections which floor price (native currency) more or equal than specified value
          required: false
          schema:
            type: number
            format: bigdecimal
        - name: maxFloorPriceNative
          in: query
          description: Show collections which floor price (native currency) less or equal than specified value
          required: false
          schema:
            type: number
            format: bigdecimal
        - name: sort
          in: query
          description: Collections sorting
          required: false
          schema:
            "$ref": "#/components/schemas/OlapTradesLeaderboardSort"
        - name: limit
          in: query
          description: Limit of records in leaderboard
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: continuation
          in: query
          description: Page reference. Taken from previous response
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapCollectionVolumeRankingResponse"
              example:
                continuation: 45325.07_ETHEREUM:0xe8f88d16f24255fcfab25959705d724406d67d9d
                result:
                  - id: ETHEREUM:0xe8f88d16f24255fcfab25959705d724406d67d9d
                    volumeUsd:
                      currency: USD
                      value: 45325.07
                      changePercent: -51.196335
                    volumeNative:
                      currency: ETH
                      value: 23.95
                    itemsBought: 1
                    floorPrice:
                      currency: ETH
                      value: 24.0
                      changePercent: -13.5332
                    listed: 33
                    totalItemSupply: 250
                    ownersCount: 187
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/transactions":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection transactions
      operationId: getTransactions
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 3602
                  - 2566
                  - 285
                currentValue: 260
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/stats":
    get:
      tags:
        - data-controller
      description: Get general statistics about collection
      operationId: getCollectionStats
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: currency
          in: query
          description: Currency of statistics
          required: false
          schema:
            "$ref": "#/components/schemas/OlapCurrencyType"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapGeneralStatsResponse"
              example:
                highestSale: 43.71
                floorPrice: 1.45
                marketCap: 14529
                items: 10020
                owners: 6472
                volume: 41913.50477591493
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/sellers":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection sellers
      operationId: getSellers
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 2744
                  - 5487
                  - 895
                currentValue: 1767
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/prices":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection items prices
      operationId: getPrices
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: currency
          in: query
          description: Currency of statistics
          required: false
          schema:
            "$ref": "#/components/schemas/OlapCurrencyType"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapPricesResponse"
              example:
                dates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                avgPrices:
                  - 3.0356821472801507
                  - 3.0695980858360876
                  - 4.084722218806717
                medianPrices:
                  - 2.999
                  - 3.1
                  - 4.12
                minPrices:
                  - 0.45
                  - 0.25
                  - 2.26
                sumPrices:
                  - 10934.527094503102
                  - 7876.5886882554005
                  - 1164.1458323599143
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/owners":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection owners
      operationId: getOwners
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 2215
                  - 6381
                  - 6363
                currentValue: 6476
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/marketcap":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection market cap
      operationId: getMarketcap
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: currency
          in: query
          description: Currency of statistics
          required: false
          schema:
            "$ref": "#/components/schemas/OlapCurrencyType"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 6800
                  - 16683.68
                  - 19038
                currentValue: 14529
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  /v0.1/data/collections/{collection}/gmv:
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection gross merchandise value
      operationId: getGmv
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: currency
          in: query
          description: Currency of statistics
          required: false
          schema:
            "$ref": "#/components/schemas/OlapCurrencyType"
        - name: period
          in: query
          description: "Time period of statistics. Default: D1"
          required: false
          schema:
            "$ref": "#/components/schemas/OlapPeriod"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 10934.527094503102
                  - 7876.5886882554005
                  - 1164.1458323599143
                currentValue: 498.19370351666873
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/floorPrice":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection item floor price
      operationId: getFloorPrice
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: currency
          in: query
          description: Currency of statistics
          required: false
          schema:
            "$ref": "#/components/schemas/OlapCurrencyType"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-05'
                  - '2022-05-06'
                  - '2022-05-07'
                historicalValues:
                  - 1.7
                  - 1.69
                  - 1.9
                currentValue: 1.45
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
  "/v0.1/data/collections/{collection}/buyers":
    get:
      tags:
        - data-controller
      description: Get historical statistics about collection buyers
      operationId: getBuyers
      parameters:
        - name: collection
          in: path
          description: Identifier of collection
          required: true
          schema:
            "$ref": "#/components/schemas/OlapCollectionPattern"
        - name: filters
          in: query
          description: Filters of statistics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapStatsGraphResponse"
              example:
                historicalDates:
                  - '2022-05-08'
                  - '2022-05-09'
                  - '2022-05-10'
                historicalValues:
                  - 524
                  - 791
                  - 1619
                currentValue: 1767
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OlapError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OlapError"

components:
  schemas:

    Platform:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS
        - IMMUTABLEX
        - HEN
        - OBJKT
        - VERSUM
        - TEIA
        - OTHER
        - X2Y2
        - LOOKSRARE
        - SUDOSWAP
        - FXHASH

    Blockchain:
      type: string
      enum:
        - ETHEREUM
        - POLYGON
        - FLOW
        - TEZOS
        - SOLANA
        - IMMUTABLEX
      example: "${blockchain}"

    BlockchainGroup:
      type: string
      enum:
        - ETHEREUM
        - FLOW
        - TEZOS
        - SOLANA

    Payout:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer
      required:
        - account
        - value

    #################### Sign - Union ####################

    SignatureValidationForm:
      required:
        - signer
        - message
        - signature
      type: object
      properties:
        signer:
          $ref: "#/components/schemas/UnionAddress"
        publicKey:
          type: string
          description: "The creator's public key"
        message:
          type: string
        signature:
          type: string
          description: "Digital signature of the signer"

    ################## Currency - Union ##################

    CurrencyId:
      type: string
      description: "Currency Id, has format `${blockchain}:${token}` or `${blockchain}:${token}:${tokenId}`"
      example: "${currencyId}"

    CurrencyUsdRate:
      type: object
      required:
        - symbol
        - rate
        - date
      properties:
        currencyId:
          deprecated: true
          type: string
          description: "Currency Id"
          example: "usdc"
        symbol:
          type: string
          description: "Currency Symbol"
          example: "usdc"
        rate:
          $ref: '#/components/schemas/BigDecimal'
        date:
          type: string
          format: date-time
          description: "Date and time of currency USD rate"

    Currency:
      type: object
      properties:
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        symbol:
          type: string
        alias:
          type: string
          description: "Alias to real coin, 'usd' means 1:1 to USD"
      required:
        - currencyId
        - symbol

    Currencies:
      type: object
      required:
        - currencies
      properties:
        currencies:
          type: array
          items:
            $ref: "#/components/schemas/Currency"

    #################### Meta - Union ####################

    Meta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the NFT item"
        description:
          type: string
          description: "Description of the NFT item"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        language:
          description: "Language in RFC 1176 format"
          type: string
        rights:
          type: string
        rightsUri:
          type: string
        externalUri:
          description: "URI to external page related to the Item"
          type: string
        originalMetaUri:
          description: "URI to the original meta JSON"
          type: string
        attributes:
          type: array
          description: "Attributes of the NFT item"
          items:
            "$ref": "#/components/schemas/MetaAttribute"
        content:
          type: array
          description: "NFT content information"
          items:
            $ref: "#/components/schemas/MetaContent"
        restrictions:
          type: array
          description: "Restrictions types set for this item"
          items:
            $ref: "#/components/schemas/RestrictionType"
      required:
        - name
        - attributes
        - content

    MetaAttribute:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        format:
          type: string

    MetaContent:
      type: object
      properties:
        fileName:
          type: string
        url:
          type: string
        representation:
          type: string
          enum:
            - PREVIEW
            - BIG
            - ORIGINAL
        mimeType:
          type: string
          example: "image/png"
        size:
          type: integer
          format: int64
        available:
          type: boolean
      required:
        - url
        - representation

      oneOf:
        - $ref: "#/components/schemas/ImageContent"
        - $ref: "#/components/schemas/VideoContent"
        - $ref: "#/components/schemas/AudioContent"
        - $ref: "#/components/schemas/Model3dContent"
        - $ref: "#/components/schemas/HtmlContent"

    ImageContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMAGE
        width:
          type: integer
        height:
          type: integer

    VideoContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - VIDEO
        width:
          type: integer
        height:
          type: integer

    AudioContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - AUDIO

    Model3dContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MODEL_3D

    HtmlContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - HTML

    RestrictionType:
      type: string
      enum:
        - OWNERSHIP

    RestrictionCheckForm:
      type: object
      oneOf:
        - $ref: "#/components/schemas/OwnershipRestrictionCheckForm"

    OwnershipRestrictionCheckForm:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - OWNERSHIP
        user:
          $ref: "#/components/schemas/UnionAddress"
      required:
        - user

    RestrictionCheckResult:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success

    ################### Common - Union ###################

    OriginOrders:
      type: object
      properties:
        origin:
          type: string
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
      required:
        - origin

    AmmOrders:
      type: object
      properties:
        ids:
          type: array
          description: "List of the automated market maker order id"
          items:
            $ref: "#/components/schemas/OrderId"
      required:
        - ids

    #################### Item - Union ####################

    ItemId:
      type: string
      description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
      example: "${itemId}"

    ItemIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "List of the item id"
          items:
            $ref: "#/components/schemas/ItemId"

    Item:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ItemId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        collection:
          $ref: "#/components/schemas/CollectionId"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazySupply:
          $ref: "#/components/schemas/BigInteger"
        pending:
          type: array
          description: "Pending information about the item"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemTransfer"
        mintedAt:
          type: string
          format: date-time
          description: "Date and time of the item minting"
        lastUpdatedAt:
          type: string
          format: date-time
          description: "Filter condition to return only items that have been updated at this date"
        supply:
          $ref: "#/components/schemas/BigInteger"
        meta:
          $ref: "#/components/schemas/Meta"
        deleted:
          type: boolean
          description: "Item was deleted or not"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        originOrders:
          type: array
          items:
            $ref: "#/components/schemas/OriginOrders"
        ammOrders:
          $ref: "#/components/schemas/AmmOrders"
        auctions:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Auction"
        totalStock:
          $ref: "#/components/schemas/BigInteger"
        sellers:
          type: integer
          description: "Total count of users selling this item ATM"
        lastSale:
          $ref: "#/components/schemas/ItemLastSale"
        self:
          type: boolean
        suspicious:
          type: boolean
      required:
        - id
        - blockchain
        - creators
        - lazySupply
        - pending
        - mintedAt
        - lastUpdatedAt
        - supply
        - deleted
        - sellers
        - auctions

    ItemLastSale:
      type: object
      properties:
        date:
          type: string
          format: date-time
        seller:
          $ref: "#/components/schemas/UnionAddress"
        buyer:
          $ref: "#/components/schemas/UnionAddress"
        value:
          $ref: "#/components/schemas/BigDecimal"
        currency:
          $ref: "#/components/schemas/AssetType"
        price:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - date
        - from
        - to
        - value
        - currency
        - price

    ItemWithOwnership:
      type: object
      properties:
        item:
          $ref: "#/components/schemas/Item"
        ownership:
          $ref: "#/components/schemas/ItemOwnership"
      required:
        - item
        - ownership

    Items:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of items were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate items search result"
        items:
          type: array
          description: "List of found items"
          default: [ ]
          items:
            $ref: "#/components/schemas/Item"
      required:
        - items

    ItemsWithOwnership:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of items were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate items search result"
        items:
          type: array
          description: "List of found items"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemWithOwnership"
      required:
        - items

    CollectionEvent:
      type: object
      properties:
        collectionId:
          $ref: "#/components/schemas/CollectionId"
        eventId:
          type: string
      required:
        - eventId
        - collectionId
      oneOf:
        - $ref: "#/components/schemas/CollectionUpdateEvent"

    CollectionUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        collection:
          $ref: "#/components/schemas/Collection"
      required:
        - "@type"
        - collection

    ItemEvent:
      type: object
      properties:
        itemId:
          $ref: "#/components/schemas/ItemId"
        eventId:
          type: string
      required:
        - eventId
        - itemId
      oneOf:
        - $ref: "#/components/schemas/ItemUpdateEvent"
        - $ref: "#/components/schemas/ItemDeleteEvent"

    ItemUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        item:
          $ref: "#/components/schemas/Item"
      required:
        - "@type"
        - item

    ItemDeleteEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"
        - itemId

    #################### Trait - Union ####################
    Traits:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate traits search result"
        traits:
          type: array
          description: "List of found traits"
          default: [ ]
          items:
            $ref: "#/components/schemas/Trait"
      required:
        - traits
    Trait:
      title: Trait
      type: object
      description: Combination of Item attribute key with list of values
      required:
        - key
        - values
      properties:
        key:
          $ref: '#/components/schemas/TraitEntry'
        values:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TraitEntry'

    TraitEntry:
      title: TraitEntry
      type: object
      description: Combination of Item attribute key/value with it's count
      required:
        - value
        - count
      properties:
        value:
          type: string
        count:
          type: integer
          format: int64

    TraitsRarityRequest:
      title: TraitsRarityRequest
      type: object
      description: Request rarity of the properties in the collection
      required:
        - collectionId
        - properties
      properties:
        collectionId:
          type: string
          example: "${filterCollections}"
        properties:
          type: array
          items:
            $ref: '#/components/schemas/TraitProperty'

    TraitProperty:
      title: TraitProperty
      type: object
      description: Item trait property
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: "${filterTraitKey}"
        value:
          type: string
          example: "${filterTraitsValue}"

    ExtendedTraitProperty:
      title: ExtendedTraitProperty
      type: object
      description: Trait property parameters with additional features
      required:
        - key
        - value
        - rarity
      properties:
        key:
          type: string
        value:
          type: string
        rarity:
          type: number
          format: bigdecimal
          description: Rarity percent

    ExtendedTraitProperties:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate result"
        traits:
          type: array
          description: "List of ExtendedTraitProperty"
          default: [ ]
          items:
            $ref: "#/components/schemas/ExtendedTraitProperty"
      required:
        - traits


    #################### Ownership - Union ####################

    OwnershipId:
      type: string
      example: "${ownershipId}"

    OwnershipIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "List of the Ownerships ids"
          items:
            $ref: "#/components/schemas/OwnershipId"

    Ownership:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OwnershipId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        itemId:
          $ref: "#/components/schemas/ItemId"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        collection:
          $ref: "#/components/schemas/CollectionId"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/UnionAddress"
        value:
          $ref: "#/components/schemas/BigInteger"
        source:
          $ref: "#/components/schemas/OwnershipSource"
        createdAt:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        creators:
          type: array
          deprecated: true
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
        pending:
          type: array
          description: "Pending information about the item"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemHistory"
        auction:
          $ref: "#/components/schemas/Auction"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        originOrders:
          type: array
          items:
            $ref: "#/components/schemas/OriginOrders"
      required:
        - id
        - blockchain
        - owner
        - value
        - createdAt
        - lazyValue
        - pending

    OwnershipSource:
      type: string
      enum:
        - MINT
        - PURCHASE
        - TRANSFER

    ItemOwnership:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OwnershipId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        collection:
          $ref: "#/components/schemas/CollectionId"
        owner:
          $ref: "#/components/schemas/UnionAddress"
        value:
          $ref: "#/components/schemas/BigInteger"
        createdAt:
          type: string
          format: "date-time"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
      required:
        - id
        - blockchain
        - owner
        - value
        - createdAt
        - creators
        - lazyValue
        - pending

    ItemHistory:
      type: object
      properties:
        owner:
          "$ref": "#/components/schemas/UnionAddress"
        contract:
          "$ref": "#/components/schemas/ContractAddress"
        tokenId:
          "$ref": "#/components/schemas/BigInteger"
        value:
          "$ref": "#/components/schemas/BigInteger"
        date:
          type: string
          format: date-time
      description: History of item
      required:
        - contract
        - tokenId
        - date
      oneOf:
        - "$ref": "#/components/schemas/ItemRoyalty"
        - "$ref": "#/components/schemas/ItemTransfer"

    ItemRoyalty:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ROYALTY
        royalties:
          type: array
          default: [ ]
          items:
            "$ref": "#/components/schemas/Royalty"
      required:
        - "@type"
        - royalties

    ItemTransfer:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          "$ref": "#/components/schemas/UnionAddress"
      required:
        - "@type"
        - owner
        - value
        - from

    Royalty:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer
      required:
        - account
        - value

    Royalties:
      type: object
      properties:
        royalties:
          type: array
          items:
            $ref: "#/components/schemas/Royalty"
      required:
        - royalties

    Creator:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer
      required:
        - account
        - value

    Ownerships:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of ownerships were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate Ownerships search result"
        ownerships:
          type: array
          default: [ ]
          description: "List of found ownerships"
          items:
            $ref: "#/components/schemas/Ownership"
      required:
        - ownerships

    OwnershipEvent:
      type: object
      properties:
        ownershipId:
          $ref: "#/components/schemas/OwnershipId"
        eventId:
          type: string
      required:
        - ownershipId
        - eventId
      oneOf:
        - $ref: "#/components/schemas/OwnershipUpdateEvent"
        - $ref: "#/components/schemas/OwnershipDeleteEvent"

    OwnershipUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        ownership:
          $ref: "#/components/schemas/Ownership"
      required:
        - "@type"
        - ownership

    OwnershipDeleteEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"

    OwnershipSearchRequest:
      title: "OwnershipSearchQuery"
      type: object
      description: "Ownerships complex search query"
      required:
        - size
        - filter
      properties:
        size:
          minimum: 1
          maximum: 1000
          default: 50
          type: integer
          format: int32
          description: "Number of entities returned"
        continuation:
          type: string
          description: "Continuation token to paginate ownerships search result"
        filter:
          $ref: "#/components/schemas/OwnershipSearchFilter"
        sort:
          $ref: "#/components/schemas/OwnershipSearchSort"

    OwnershipSearchFilter:
      type: object
      description: "Filter for ownerships search query"
      properties:
        blockchains:
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/UnionAddress"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemId"
        auctions:
          type: array
          items:
            $ref: "#/components/schemas/AuctionId"
        auctionsOwners:
          type: array
          items:
            $ref: "#/components/schemas/UnionAddress"
        beforeDate:
          type: string
          format: date-time
        afterDate:
          type: string
          format: date-time
        sellPriceFrom:
          type: number
          format: double
        sellPriceTo:
          type: number
          format: double
        sellCurrency:
          type: string
        sellPlatforms:
          type: array
          items:
            $ref: "#/components/schemas/Platform"

    OwnershipSearchSort:
      type: string
      enum:
        - LATEST
        - EARLIEST
        - HIGHEST_SELL
        - LOWEST_SELL

    ItemsSearchRequest:
      type: object
      description: "Complex search request for items"
      required:
        - size
        - filter
      properties:
        size:
          minimum: 1
          maximum: 1000
          default: 50
          type: integer
          format: int32
          description: "Number of entities returned"
        continuation:
          type: string
          description: "Continuation token to paginate items search result"
        filter:
          $ref: "#/components/schemas/ItemsSearchFilter"
        sort:
          $ref: "#/components/schemas/ItemsSearchSort"


    ItemsSearchFilter:
      type: object
      description: "Filter for items search query"
      properties:
        blockchains:
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        deleted:
          type: boolean
          default: false
          example: "${filterDeleted}"
        names:
          type: array
          items:
            type: string
            example: "${filterName}"
        descriptions:
          type: array
          items:
            type: string
            example: "${filterDescription}"
        traits:
          type: array
          items:
            $ref: "#/components/schemas/TraitProperty"
        creators:
          type: array
          items:
            $ref: "#/components/schemas/UnionAddress"
        mintedAtFrom:
          type: string
          format: date-time
          example: "${filterDateAtFrom}"
        mintedAtTo:
          type: string
          format: date-time
          example: "${filterDateAtTo}"
        lastUpdatedAtFrom:
          type: string
          format: date-time
          example: "${filterDateAtFrom}"
        lastUpdatedAtTo:
          type: string
          format: date-time
          example: "${filterDateAtTo}"
        sellPriceFrom:
          type: number
          format: double
          example: "${filterPriceFrom}"
        sellPriceTo:
          type: number
          format: double
          example: "${filterPriceTo}"
        sellCurrency:
          type: string
          example: "${filterCurrency}"
        sellPlatforms:
          type: array
          items:
            $ref: "#/components/schemas/Platform"
        bidPriceFrom:
          type: number
          format: double
          example: "${filterPriceFrom}"
        bidPriceTo:
          type: number
          format: double
          example: "${filterPriceTo}"
        bidCurrency:
          type: string
          example: "${filterCurrency}"
        bidPlatforms:
          type: array
          items:
            $ref: "#/components/schemas/Platform"



    ItemsSearchSort:
      type: string
      enum:
        - LATEST
        - EARLIEST
        - HIGHEST_SELL
        - LOWEST_SELL
        - HIGHEST_BID
        - LOWEST_BID

    #################### Order - Union ####################

    OrderId:
      type: string
      example: "${orderId}"

    OrderIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "Array of the orders Ids in format '${blockchain}:${id}'"
          items:
            type: string

    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        fill:
          $ref: "#/components/schemas/BigDecimal"
        platform:
          $ref: "#/components/schemas/Platform"
        status:
          $ref: "#/components/schemas/OrderStatus"
        startedAt:
          type: string
          format: "date-time"
        endedAt:
          type: string
          format: "date-time"
        makeStock:
          $ref: "#/components/schemas/BigDecimal"
        cancelled:
          type: "boolean"
        optionalRoyalties:
          type: "boolean"
          default: false
        createdAt:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        dbUpdatedAt:
          type: string
          format: "date-time"
        makePrice:
          $ref: "#/components/schemas/BigDecimal"
        takePrice:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        maker:
          $ref: "#/components/schemas/UnionAddress"
        taker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        salt:
          type: string
        signature:
          type: string
        pending:
          type: array
          description: "Pending information about the order"
          default: [ ]
          items:
            $ref: "#/components/schemas/PendingOrder"
        data:
          $ref: "#/components/schemas/OrderData"
      required:
        - id
        - platform
        - status
        - fill
        - makeStock
        - cancelled
        - createdAt
        - lastUpdatedAt
        - type
        - maker
        - make
        - take
        - salt
        - data

    OrderData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/EthOrderDataLegacy"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV1"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV3Sell"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV3Buy"
        - "$ref": "#/components/schemas/EthOrderOpenSeaV1DataV1"
        - "$ref": "#/components/schemas/EthOrderSeaportDataV1"
        - "$ref": "#/components/schemas/EthOrderCryptoPunksData"
        - "$ref": "#/components/schemas/EthX2Y2OrderDataV1"
        - "$ref": "#/components/schemas/EthLooksRareOrderDataV1"
        - "$ref": "#/components/schemas/EthSudoSwapAmmDataV1"
        - "$ref": "#/components/schemas/TezosOrderDataLegacy"
        - "$ref": "#/components/schemas/TezosOrderDataV2"
        - "$ref": "#/components/schemas/FlowOrderDataV1"
        - "$ref": "#/components/schemas/SolanaAuctionHouseDataV1"
        - "$ref": "#/components/schemas/ImmutablexOrderDataV1"

    Orders:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate orders search result"
        orders:
          type: array
          description: "List of found orders"
          default: [ ]
          items:
            $ref: "#/components/schemas/Order"
      required:
        - orders

    OrderEvent:
      type: object
      properties:
        orderId:
          "$ref": "#/components/schemas/OrderId"
        eventId:
          type: string
      required:
        - orderId
        - eventId
      oneOf:
        - "$ref": "#/components/schemas/OrderUpdateEvent"

    OrderUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        order:
          "$ref": "#/components/schemas/Order"
      required:
        - "@type"
        - order

    OrderStatus:
      type: string
      enum:
        - ACTIVE
        - FILLED
        - HISTORICAL
        - INACTIVE
        - CANCELLED

    OrderSort:
      type: string
      enum:
        - LAST_UPDATE_ASC
        - LAST_UPDATE_DESC

    #################### Auction - Union ####################

    AuctionId:
      type: string
      example: "${blockchain}:${id}"

    AuctionHistory:
      type: object
      required:
        - hash
      properties:
        hash:
          type: string

    AuctionStatus:
      type: string
      enum:
        - ACTIVE
        - CANCELLED
        - FINISHED

    RaribleAuctionV1BidDataV1:
      type: object
      required:
        - originFees
        - payouts
      properties:
        dataType:
          type: string
          description: "Data type of the auction bid data"
          enum:
            - RARIBLE_AUCTION_V1_BID_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"

    AuctionBidData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionBid:
      type: object
      required:
        - buyer
        - amount
        - date
        - status
      properties:
        buyer:
          $ref: "#/components/schemas/UnionAddress"
        amount:
          $ref: "#/components/schemas/BigDecimal"
        date:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - HISTORICAL
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidV1"

    RaribleAuctionV1BidV1:
      type: object
      required:
        - data
      properties:
        type:
          type: string
          description: "Type of the auction bid"
          enum:
            - RARIBLE_AUCTION_V1_BID_V1
        data:
          $ref: "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionSort:
      type: string
      enum:
        - LAST_UPDATE_ASC
        - LAST_UPDATE_DESC
        - BUY_PRICE_ASC

    AuctionData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1DataV1"

    RaribleAuctionV1DataV1:
      type: object
      required:
        - originFees
        - payouts
        - duration
      properties:
        dataType:
          type: string
          description: "Data type of the auction"
          enum:
            - RARIBLE_AUCTION_V1_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        startTime:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/BigInteger"
        buyOutPrice:
          $ref: "#/components/schemas/BigDecimal"

    Auction:
      type: object
      required:
        - id
        - contract
        - seller
        - sell
        - buy
        - minimalStep
        - minimalPrice
        - createdAt
        - lastUpdateAt
        - status
        - ongoing
        - hash
        - auctionId
        - data
      properties:
        id:
          $ref: "#/components/schemas/AuctionId"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        seller:
          $ref: "#/components/schemas/UnionAddress"
        sell:
          $ref: "#/components/schemas/Asset"
        buy:
          $ref: "#/components/schemas/AssetType"
        endTime:
          type: string
          format: date-time
        minimalStep:
          $ref: "#/components/schemas/BigDecimal"
        minimalPrice:
          $ref: "#/components/schemas/BigDecimal"
        createdAt:
          type: string
          format: date-time
        lastUpdateAt:
          type: string
          format: date-time
        buyPrice:
          $ref: "#/components/schemas/BigDecimal"
        buyPriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        pending:
          type: array
          items:
            $ref: "#/components/schemas/AuctionHistory"
        status:
          $ref: "#/components/schemas/AuctionStatus"
        ongoing:
          type: boolean
        hash:
          type: string
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/AuctionBid"
        data:
          $ref: "#/components/schemas/AuctionData"

    RaribleAuctionV1:
      type: object
      required:
        - auctionId
        - data
      properties:
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/RaribleAuctionV1BidV1"
        data:
          $ref: "#/components/schemas/RaribleAuctionV1DataV1"

    Auctions:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of auctions were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate auctions search result"
        auctions:
          type: array
          description: "List of found auctions"
          default: [ ]
          items:
            $ref: "#/components/schemas/Auction"
      required:
        - auctions

    AuctionBids:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of auction bids were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate auction bids search result"
        bids:
          type: array
          description: "List of found auction bids"
          default: [ ]
          items:
            $ref: "#/components/schemas/AuctionBid"
      required:
        - bids

    #################### Activity - Union ####################

    ActivityId:
      type: string
      example: "${blockchain}:${id}"

    ActivitySort:
      description: "Sorting by data update time"
      type: string
      enum:
        - LATEST_FIRST
        - EARLIEST_FIRST

    SyncSort:
      type: string
      enum:
        - DB_UPDATE_ASC
        - DB_UPDATE_DESC

    SyncType:
      type: string
      enum:
        - ORDER
        - NFT
        - AUCTION

    ActivityType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    UserActivityType:
      type: string
      enum:
        - TRANSFER_FROM
        - TRANSFER_TO
        - MINT
        - BURN
        - MAKE_BID
        - GET_BID
        - LIST
        - BUY
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    Activity:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ActivityId"
        date:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        cursor:
          type: string
        reverted:
          type: boolean
      oneOf:
        - $ref: "#/components/schemas/MintActivity"
        - $ref: "#/components/schemas/BurnActivity"
        - $ref: "#/components/schemas/TransferActivity"
        - $ref: "#/components/schemas/OrderMatchActivity"
        - $ref: "#/components/schemas/OrderBidActivity"
        - $ref: "#/components/schemas/OrderListActivity"
        - $ref: "#/components/schemas/OrderCancelBidActivity"
        - $ref: "#/components/schemas/OrderCancelListActivity"
        - $ref: "#/components/schemas/AuctionOpenActivity"
        - $ref: "#/components/schemas/AuctionBidActivity"
        - $ref: "#/components/schemas/AuctionFinishActivity"
        - $ref: "#/components/schemas/AuctionCancelActivity"
        - $ref: "#/components/schemas/AuctionStartActivity"
        - $ref: "#/components/schemas/AuctionEndActivity"
        - $ref: "#/components/schemas/L2DepositActivity"
        - $ref: "#/components/schemas/L2WithdrawalActivity"
      required:
        - id
        - date

    MintActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MINT
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/ContractAddress"
        tokenId: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/BigInteger"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        mintPrice:
          $ref: "#/components/schemas/BigDecimal"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - value
        - transactionHash

    BurnActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BURN
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/ContractAddress"
        tokenId: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/BigInteger"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - value
        - transactionHash

    TransferActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          $ref: "#/components/schemas/UnionAddress"
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/ContractAddress"
        tokenId: # Deprecated, replaced by itemId
          $ref: "#/components/schemas/BigInteger"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        purchase:
          type: boolean
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - from
        - owner
        - value
        - transactionHash

    OrderActivitySource:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS
        - IMMUTABLEX
        - HEN
        - OBJKT
        - X2Y2
        - LOOKSRARE
        - SUDOSWAP
        - TEIA
        - VERSUM
        - FXHASH

    OrderActivityMatchSide:
      type: object
      properties:
        maker:
          $ref: "#/components/schemas/UnionAddress"
        hash:
          type: string
        asset:
          $ref: "#/components/schemas/Asset"
      required:
        - maker
        - asset

    OrderMatchActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MATCH
        orderId:
          $ref: "#/components/schemas/OrderId"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - source
        - transactionHash
      oneOf:
        - $ref: "#/components/schemas/OrderMatchSwap"
        - $ref: "#/components/schemas/OrderMatchSell"

    OrderMatchSwap:
      type: object
      required: [left, right]
      properties:
        "@type":
          type: string
          enum:
            - SWAP
        left:
          $ref: "#/components/schemas/OrderActivityMatchSide"
        right:
          $ref: "#/components/schemas/OrderActivityMatchSide"

    OrderMatchSell:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SELL
        nft:
          $ref: "#/components/schemas/Asset"
        payment:
          $ref: "#/components/schemas/Asset"
        buyer:
          $ref: "#/components/schemas/UnionAddress"
        seller:
          $ref: "#/components/schemas/UnionAddress"
        buyerOrderHash:
          type: string
        sellerOrderHash:
          type: string
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        amountUsd:
          $ref: "#/components/schemas/BigDecimal"
        type:
          type: string
          enum:
            - SELL
            - ACCEPT_BID
        sellMarketplaceMarker:
          type: string
        buyMarketplaceMarker:
          type: string
      required:
        - nft
        - payment
        - price
        - type
        - buyer
        - seller

    OrderBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BID
        orderId:
          $ref: "#/components/schemas/OrderId"
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        marketplaceMarker:
          type: string
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - LIST
        orderId:
          $ref: "#/components/schemas/OrderId"
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderCancelBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_BID
        orderId:
          $ref: "#/components/schemas/OrderId"
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    OrderCancelListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_LIST
        orderId:
          $ref: "#/components/schemas/OrderId"
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    AuctionActivitySource:
      type: string
      enum:
        - RARIBLE

    AuctionOpenActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_open"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionBidActivity:
      type: object
      required:
        - "@type"
        - auction
        - bid
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_bid"
        auction:
          $ref: "#/components/schemas/Auction"
        bid:
          $ref: "#/components/schemas/AuctionBid"
        transactionHash:
          type: string

    AuctionFinishActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_finish"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionCancelActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_cancel"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionStartActivity:
      type: object
      required:
        - "@type"
        - auction
      properties:
        "@type":
          type: string
          enum:
            - "auction_start"
        auction:
          $ref: "#/components/schemas/Auction"

    AuctionEndActivity:
      type: object
      required:
        - "@type"
        - auction
      properties:
        "@type":
          type: string
          enum:
            - "auction_end"
        auction:
          $ref: "#/components/schemas/Auction"

    L2DepositActivity:
      type: object
      required:
        - "@type"
        - user
        - status
        - itemId
      properties:
        "@type":
          type: string
          enum:
            - L2_DEPOSIT
        user:
          $ref: "#/components/schemas/UnionAddress"
        status:
          type: string
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"

    L2WithdrawalActivity:
      type: object
      required:
        - "@type"
        - user
        - status
        - itemId
      properties:
        "@type":
          type: string
          enum:
            - L2_WITHDRAWAL
        user:
          $ref: "#/components/schemas/UnionAddress"
        status:
          type: string
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"

    Activities:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate activities search result"
        cursor:
          type: string
          description: "Combined continuation token to paginate activities search result"
        activities:
          type: array
          default: [ ]
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/Activity"
      required:
        - activities

    ActivitiesByUsersRequest:
      type: object
      required:
        - types
        - users
      properties:
        types:
          description: "Activity type"
          type: array
          items:
            $ref: "#/components/schemas/UserActivityType"
        users:
          description: "List of the user id"
          type: array
          items:
            $ref: "#/components/schemas/UnionAddress"
        blockchains:
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        from:
          description: "Lower time border of data"
          type: string
          format: "date-time"
        to:
          description: "Upper time border of data"
          type: string
          format: "date-time"
        continuation:
          description: "Continuation token from the previous response"
          type: string
        cursor:
          description: "Combined continuation token from the previous response"
          type: string
        size:
          description: "The number of items to return"
          type: integer
        sort:
          $ref: "#/components/schemas/ActivitySort"
        searchEngine:
          $ref: "#/components/schemas/SearchEngine"

    StatisticsValue:
      type: object
      description: value - native currency value
      properties:
        value:
          $ref: "#/components/schemas/BigDecimal"
        valueUsd:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - value
        - valueUsd

    StatisticsPeriod:
      type: object
      properties:
        period:
          type: string
          enum:
            - DAY
            - WEEK
            - MONTH
        value:
          $ref: "#/components/schemas/StatisticsValue"
        changePercent:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - value
        - period
        - changePercent

    CollectionStatistics:
      type: object
      properties:
        ownerCount:
          type: integer
          format: int64
        itemCount:
          type: integer
          format: int64
        ownerCountTotal:
          $ref: "#/components/schemas/BigInteger"
        itemCountTotal:
          $ref: "#/components/schemas/BigInteger"
        highestSale:
          $ref: "#/components/schemas/StatisticsValue"
        totalVolume:
          $ref: "#/components/schemas/StatisticsValue"
        volumes:
          type: array
          items:
            $ref: "#/components/schemas/StatisticsPeriod"
        floorPrice:
          $ref: "#/components/schemas/StatisticsValue"
      required:
        - totalVolume
        - volumes

    CollectionId:
      type: string
      description: "Collection Id, has format `${blockchain}:${nativeICollectionId}`"
      example: "${collectionId}"

    Collection:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CollectionId"
        parent:
          $ref: "#/components/schemas/CollectionId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        type:
          type: string
          enum:
            - CRYPTO_PUNKS
            - ERC721
            - ERC1155
            - FLOW
            - TEZOS_NFT
            - TEZOS_MT
            - SOLANA
            - IMMUTABLEX
        status:
          type: string
          enum:
            - PENDING
            - ERROR
            - CONFIRMED
        name:
          type: string
        symbol:
          type: string
        owner:
          $ref: "#/components/schemas/UnionAddress"
        features:
          type: array
          default: [ ]
          items:
            type: string
            enum:
              - APPROVE_FOR_ALL
              - SET_URI_PREFIX
              - BURN
              - MINT_WITH_ADDRESS
              - SECONDARY_SALE_FEES
              - MINT_AND_TRANSFER
        minters:
          type: array
          description: "List of addresses that can mint items in this collection"
          items:
            "$ref": "#/components/schemas/UnionAddress"
        meta:
          "$ref": "#/components/schemas/CollectionMeta"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        originOrders:
          type: array
          items:
            $ref: "#/components/schemas/OriginOrders"
        self:
          type: boolean
        statistics:
          $ref: "#/components/schemas/CollectionStatistics"
      required:
        - id
        - blockchain
        - name
        - type
        - features

    Collections:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of ownerships were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate collections search result"
        collections:
          default: [ ]
          type: array
          items:
            $ref: "#/components/schemas/Collection"
      required:
        - collections

    CollectionMeta:
      required:
        - name
        - content
      type: object
      properties:
        name:
          type: string
          description: "Name of the collection"
        description:
          type: string
          description: "Description of the collection"
        createdAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        language:
          description: "Language in RFC 1176 format"
          type: string
        rights:
          type: string
        rightsUri:
          type: string
        externalUri:
          description: "URI to external page related to the collection"
          type: string
        originalMetaUri:
          description: "URI to the original meta JSON"
          type: string
        content:
          default: [ ]
          type: array
          items:
            "$ref": "#/components/schemas/MetaContent"
        externalLink:
          type: string
          description: "External link to the original website for the collection"
        sellerFeeBasisPoints:
          type: integer
          format: int32
          description: "Indicates a 1% seller fee"
        feeRecipient:
          "$ref": "#/components/schemas/UnionAddress"

    ActivityBlockchainInfo:
      type: object
      deprecated: true
      properties:
        transactionHash:
          type: string
        blockHash:
          type: string
        blockNumber:
          type: integer
          format: int64
        logIndex:
          type: integer
      required:
        - transactionHash
        - blockHash
        - blockNumber
        - logIndex

    #################### Union - Errors ####################

    UnionApiErrorEntityNotFound:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
          default: NOT_FOUND
        message:
          type: string
          description: "Error message"

    UnionApiErrorBadRequest:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - VALIDATION
          default: BAD_REQUEST
        message:
          type: string
          description: "Error message"

    UnionApiErrorServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - UNKNOWN
          default: UNKNOWN
        message:
          type: string
          description: "Error message"

    #################### Order - Eth ####################

    EthOrderDataLegacy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V1
        fee:
          $ref: "#/components/schemas/BigInteger"
      required:
        - fee
        - "@type"

    TezosOrderDataLegacy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        makerEdpk:
          type: string
        takerEdpk:
          type: string
        legacyData:
          type: string
      required:
        - "@type"
        - payouts
        - originFees

    TezosOrderDataV2:
      type: object
      properties:
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - payouts
        - originFees
      oneOf:
        - $ref: "#/components/schemas/TezosOrderDataRaribleV2DataV2"
        - $ref: "#/components/schemas/TezosOrderDataHen"
        - $ref: "#/components/schemas/TezosOrderDataVersumV1"
        - $ref: "#/components/schemas/TezosOrderDataTeiaV1"
        - $ref: "#/components/schemas/TezosOrderDataObjktV1"
        - $ref: "#/components/schemas/TezosOrderDataObjktV2"
        - $ref: "#/components/schemas/TezosOrderDataFxhashV1"
        - $ref: "#/components/schemas/TezosOrderDataFxhashV2"

    TezosOrderDataRaribleV2DataV2:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_RARIBLE_V3

    TezosOrderDataHen:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_HEN
        internalOrderId:
          type: string

    TezosOrderDataVersumV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_VERSUM_V1
        internalOrderId:
          type: string

    TezosOrderDataTeiaV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_TEIA_V1
        internalOrderId:
          type: string

    TezosOrderDataObjktV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_OBJKT_V1
        internalOrderId:
          type: string

    TezosOrderDataObjktV2:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_OBJKT_V2
        internalOrderId:
          type: string

    TezosOrderDataFxhashV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_FXHASH_V1
        internalOrderId:
          type: string

    TezosOrderDataFxhashV2:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_FXHASH_V2
        internalOrderId:
          type: string

    EthOrderDataRaribleV2DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    EthOrderDataRaribleV2DataV3Sell:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2_DATA_V3_SELL
        payout:
          $ref: "#/components/schemas/Payout"
        originFeeFirst:
          $ref: "#/components/schemas/Payout"
        originFeeSecond:
          $ref: "#/components/schemas/Payout"
        maxFeesBasePoint:
          type: integer
        marketplaceMarker:
          type: string
      required:
        - "@type"
        - maxFeesBasePoint

    EthOrderDataRaribleV2DataV3Buy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2_DATA_V3_BUY
        payout:
          $ref: "#/components/schemas/Payout"
        originFeeFirst:
          $ref: "#/components/schemas/Payout"
        originFeeSecond:
          $ref: "#/components/schemas/Payout"
        marketplaceMarker:
          type: string
      required:
        - "@type"

    EthOrderOpenSeaV1DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_OPEN_SEA_V1
        exchange:
          $ref: "#/components/schemas/UnionAddress"
        makerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        takerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        makerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        takerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        feeRecipient:
          $ref: "#/components/schemas/UnionAddress"
        feeMethod:
          type: string
          enum:
            - PROTOCOL_FEE
            - SPLIT_FEE
        side:
          type: string
          enum:
            - BUY
            - SELL
        saleKind:
          type: string
          enum:
            - FIXED_PRICE
            - DUTCH_AUCTION
        howToCall:
          type: string
          enum:
            - CALL
            - DELEGATE_CALL
        callData:
          type: string
        replacementPattern:
          type: string
        staticTarget:
          $ref: "#/components/schemas/UnionAddress"
        staticExtraData:
          type: string
        extra:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - dataType
        - exchange
        - makerRelayerFee
        - takerRelayerFee
        - makerProtocolFee
        - takerProtocolFee
        - feeRecipient
        - feeMethod
        - side
        - saleKind
        - howToCall
        - callData
        - replacementPattern
        - staticTarget
        - staticExtraData
        - extra

    EthOrderCryptoPunksData:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_CRYPTO_PUNKS
        stub:
          type: string
          default: "STUB"
      required:
        - "@type"

    EthSeaportOrderType:
      type: string
      enum:
        - FULL_OPEN
        - PARTIAL_OPEN
        - FULL_RESTRICTED
        - PARTIAL_RESTRICTED

    EthSeaportItemType:
      type: string
      enum:
        - NATIVE
        - ERC20
        - ERC721
        - ERC1155
        - ERC721_WITH_CRITERIA
        - ERC1155_WITH_CRITERIA

    EthSeaportOffer:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/EthSeaportItemType"
        token:
          $ref: "#/components/schemas/UnionAddress"
        identifierOrCriteria:
          $ref: "#/components/schemas/BigInteger"
        startAmount:
          $ref: "#/components/schemas/BigInteger"
        endAmount:
          $ref: "#/components/schemas/BigInteger"
      required:
        - itemType
        - token
        - identifierOrCriteria
        - startAmount
        - endAmount

    EthSeaportConsideration:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/EthSeaportItemType"
        token:
          $ref: "#/components/schemas/UnionAddress"
        identifierOrCriteria:
          $ref: "#/components/schemas/BigInteger"
        startAmount:
          $ref: "#/components/schemas/BigInteger"
        endAmount:
          $ref: "#/components/schemas/BigInteger"
        recipient:
          $ref: "#/components/schemas/UnionAddress"
      required:
        - itemType
        - token
        - identifierOrCriteria
        - startAmount
        - endAmount
        - recipient

    EthOrderSeaportDataV1:
      type: object
      properties:
        protocol:
          $ref: "#/components/schemas/UnionAddress"
        orderType:
          $ref: "#/components/schemas/EthSeaportOrderType"
        offer:
          type: array
          items:
            $ref: "#/components/schemas/EthSeaportOffer"
        consideration:
          type: array
          items:
            $ref: "#/components/schemas/EthSeaportConsideration"
        zone:
          $ref: "#/components/schemas/UnionAddress"
        zoneHash:
          type: string
        conduitKey:
          type: string
        counter:
          type: integer
          format: int64
      required:
        - protocol
        - orderType
        - offer
        - consideration
        - zone
        - zoneHash
        - conduitKey
        - counter
      oneOf:
        - "$ref": "#/components/schemas/EthOrderBasicSeaportDataV1"

    EthOrderBasicSeaportDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_BASIC_SEAPORT_DATA_V1
      required:
        - "@type"

    EthX2Y2OrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_X2Y2_ORDER_DATA_V1
        itemHash:
          type: string
        isCollectionOffer:
          type: boolean
        isBundle:
          type: boolean
        side:
          type: integer
        orderId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - itemHash
        - isCollectionOffer
        - isBundle
        - side
        - orderId

    EthLooksRareOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_LOOKSRARE_ORDER_DATA_V1
        minPercentageToAsk:
          type: integer
        strategy:
          $ref: "#/components/schemas/UnionAddress"
        nonce:
          type: integer
          format: int64
        params:
          type: string
      required:
        - "@type"
        - minPercentageToAsk
        - strategy
        - nonce

    SudoSwapPoolType:
      type: string
      enum:
        - TOKEN
        - NFT
        - TRADE

    SudoSwapCurveType:
      type: string
      enum:
        - LINEAR
        - EXPONENTIAL
        - UNKNOWN

    EthSudoSwapAmmDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_SUDOSWAP_AMM_DATA_V1
        poolAddress:
          $ref: "#/components/schemas/UnionAddress"
        bondingCurve:
          $ref: "#/components/schemas/UnionAddress"
        curveType:
          $ref: "#/components/schemas/SudoSwapCurveType"
        assetRecipient:
          $ref: "#/components/schemas/UnionAddress"
        poolType:
          $ref: "#/components/schemas/SudoSwapPoolType"
        delta:
          $ref: "#/components/schemas/BigInteger"
        fee:
          $ref: "#/components/schemas/BigInteger"
        feeDecimal:
          type: integer
      required:
        - "@type"
        - poolAddress
        - bondingCurve
        - curveType
        - assetRecipient
        - poolType
        - delta
        - fee
        - feeDecimal

    PendingOrder:
      type: object
      required:
        - id
        - date
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        date:
          type: string
          format: date-time
        maker:
          $ref: "#/components/schemas/UnionAddress"
      oneOf:
        - $ref: "#/components/schemas/PendingOrderCancel"
        - $ref: "#/components/schemas/PendingOrderMatch"
        - $ref: "#/components/schemas/OnChainOrder"
        - $ref: "#/components/schemas/OnChainAmmOrder"

    PendingOrderMatch:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDER_SIDE_MATCH
        side:
          type: string
          enum:
            - LEFT
            - RIGHT
        fill:
          $ref: "#/components/schemas/BigDecimal"
        taker:
          $ref: "#/components/schemas/UnionAddress"
        counterHash:
          type: string
        makeUsd:
          $ref: "#/components/schemas/BigDecimal"
        takeUsd:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - "@type"
        - fill

    PendingOrderCancel:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL
        owner:
          $ref: "#/components/schemas/UnionAddress"
      required:
        - "@type"

    OnChainOrder:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ON_CHAIN_ORDER
      required:
        - "@type"

    OnChainAmmOrder:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ON_CHAIN_AMM_ORDER
      required:
        - "@type"

    Asset:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - type
        - value

    AssetType:
      type: object
      oneOf:
        - $ref: "#/components/schemas/FlowAssetTypeNft"
        - $ref: "#/components/schemas/FlowAssetTypeFt"
        - $ref: "#/components/schemas/TezosXTZAssetType"
        - $ref: "#/components/schemas/TezosFTAssetType"
        - $ref: "#/components/schemas/TezosNFTAssetType"
        - $ref: "#/components/schemas/TezosMTAssetType"
        - $ref: "#/components/schemas/EthEthereumAssetType"
        - $ref: "#/components/schemas/EthErc20AssetType"
        - $ref: "#/components/schemas/EthErc721AssetType"
        - $ref: "#/components/schemas/EthErc721LazyAssetType"
        - $ref: "#/components/schemas/EthErc1155AssetType"
        - $ref: "#/components/schemas/EthErc1155LazyAssetType"
        - $ref: "#/components/schemas/EthCryptoPunksAssetType"
        - $ref: "#/components/schemas/EthGenerativeArtAssetType"
        - $ref: "#/components/schemas/EthCollectionAssetType"
        - $ref: "#/components/schemas/EthAmmNftAssetType"
        - $ref: "#/components/schemas/SolanaNftAssetType"
        - $ref: "#/components/schemas/SolanaFtAssetType"
        - $ref: "#/components/schemas/SolanaSolAssetType"

    TezosXTZAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - XTZ
      required:
        - "@type"

    TezosFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract

    TezosNFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    TezosMTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_MT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    FlowAssetTypeNft:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - tokenId
        - contract

    FlowAssetTypeFt:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthEthereumAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH
        blockchain:
          $ref: "#/components/schemas/Blockchain"
      required:
        - "@type"

    EthErc20AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC20
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthErc721AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc721LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - royalties
        - signatures

    EthErc1155AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc1155LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        supply:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - supply
        - royalties
        - signatures

    EthCryptoPunksAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "CRYPTO_PUNKS"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          type: integer
      required:
        - "@type"
        - contract
        - tokenId

    EthGenerativeArtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "GEN_ART"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthCollectionAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "COLLECTION"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthAmmNftAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "AMM_NFT"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    SolanaNftAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_NFT
        itemId:
          $ref: "#/components/schemas/ItemId"
      required:
        - "@type"
        - itemId

    SolanaFtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_FT
        address:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - address

    SolanaSolAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_SOL
      required:
        - "@type"

    #################### Order - Flow ####################

    FlowOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_RARIBLE_V1
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    #################### Order - Immutablex ####################

    ImmutablexOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMMUTABLEX_RARIBLE_V1
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    #################### Order - Solana ####################

    SolanaAuctionHouseDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_AUCTION_HOUSE_V1
        fee:
          type: integer
        requiresSignOff:
          type: boolean
        auctionHouse:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"

    #################### Subscription-related ####################

    SubscriptionAction:
      type: string
      enum:
        - SUBSCRIBE
        - UNSUBSCRIBE

    SubscriptionRequest:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/SubscriptionAction"
      required:
        - action
      oneOf:
        - $ref: "#/components/schemas/ItemSubscriptionRequest"
        - $ref: "#/components/schemas/OwnershipSubscriptionRequest"
        - $ref: "#/components/schemas/OrdersSubscriptionRequest"
        - $ref: "#/components/schemas/OrdersByItemSubscriptionRequest"
        - $ref: "#/components/schemas/OrdersByCollectionSubscriptionRequest"


    OrdersSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDERS
        platform:
          "$ref": "#/components/schemas/Platform"
        orderType:
          "$ref": "#/components/schemas/OrderType"
      required:
        - "@type"

    OrdersByCollectionSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDERS_BY_COLLECTION
        collectionId:
          $ref: "#/components/schemas/CollectionId"
        platform:
          "$ref": "#/components/schemas/Platform"
        orderType:
          "$ref": "#/components/schemas/OrderType"
      required:
        - "@type"
        - collectionId

    OrdersByItemSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDERS_BY_ITEM
        itemId:
          $ref: "#/components/schemas/ItemId"
        platform:
          "$ref": "#/components/schemas/Platform"
        orderType:
          "$ref": "#/components/schemas/OrderType"
      required:
        - "@type"
        - itemId

    ItemSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ITEM
        id:
            $ref: "#/components/schemas/ItemId"
      required:
        - "@type"
        - id

    OwnershipSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - OWNERSHIP
        id:
            $ref: "#/components/schemas/OwnershipId"
      required:
        - "@type"
        - id

    SubscriptionEvent:
      type: object
      oneOf:
        - $ref: "#/components/schemas/FakeSubscriptionEvent"
        - $ref: "#/components/schemas/ItemSubscriptionEvent"
        - $ref: "#/components/schemas/OwnershipSubscriptionEvent"
        - $ref: "#/components/schemas/OrderSubscriptionEvent"

    FakeSubscriptionEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FAKE
      required:
        - "@type"

    ItemSubscriptionEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ITEM
        value:
          $ref: "#/components/schemas/ItemEvent"
      required:
        - "@type"
        - value

    OrderSubscriptionEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDER
        value:
          $ref: "#/components/schemas/OrderEvent"
      required:
        - "@type"
        - value

    OwnershipSubscriptionEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - OWNERSHIP
        value:
          $ref: "#/components/schemas/OwnershipEvent"
      required:
        - "@type"
        - value

    #################### Referenced Types ####################

    BigInteger:
      type: string
      example: 123456
    BigDecimal:
      type: string
      example: 123456.789

    ContractAddress:
      type: string
      description: "Blockchain contract address in Union format `${blockchain}:${token}`"
      example: "ETHEREUM:0xd07dc4262bcdbf85190c01c996b4c06a461d2430"
    UnionAddress:
      type: string
      description: "Blockchain address in Union format `${blockchainGroup}:${token}`"
      example: "${userId}"


    SearchEngine:
      type: string
      enum:
        - LEGACY
        - V1

    OrderType:
      type: string
      enum:
        - BID
        - SELL

    #################### Olap Types ####################

    OlapBlockchain:
      type: string
      enum:
        - ETHEREUM
        - FLOW
        - TEZOS
        - POLYGON
        - SOLANA
        - IMMUTABLEX

    OlapCollectionPattern:
      pattern: "^(ETHEREUM|FLOW|TEZOS|POLYGON|SOLANA|IMMUTABLEX):.*$"
      type: string

    OlapPeriod:
      type: string
      enum:
        - D1
        - D7
        - D30
      description: >
        Period:
          * `D1` - Last 1 day
          * `D7` - Last 7 days
          * `D30` - Last 30 days

    OlapCurrencyType:
      type: string
      default: USD
      enum:
        - USD
        - ETH
        - XTZ
        - FLOW
        - MATIC
        - SOL

    OlapCurrencyAmount:
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          "$ref": "#/components/schemas/OlapCurrencyType"
        value:
          type: number
          description: Amount of currency
          format: bigdecimal

    OlapCurrencyAmountWithChange:
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          "$ref": "#/components/schemas/OlapCurrencyType"
        value:
          type: number
          description: Amount of currency
          format: bigdecimal
        changePercent:
          type: number
          description: Change in percent. Calculated as <current period value> / <previous period value> - 1
          format: bigdecimal

    OlapIntegerNumberWithChange:
      required:
        - value
      type: object
      properties:
        value:
          type: integer
          description: Value of integer number
          format: int64
        changePercent:
          type: number
          description: Change in percent. Calculated as <current period value> / <previous period value> - 1
          format: bigdecimal

    OlapTrendingCollectionEntry:
      required:
        - id
        - numberOfSales
        - volumeNative
        - volumeUsd
      type: object
      properties:
        id:
          type: string
          description: Identifier of collection
        numberOfSales:
          "$ref": "#/components/schemas/OlapIntegerNumberWithChange"
        volumeUsd:
          "$ref": "#/components/schemas/OlapCurrencyAmountWithChange"
        volumeNative:
          "$ref": "#/components/schemas/OlapCurrencyAmount"
        floorPrice:
          "$ref": "#/components/schemas/OlapCurrencyAmount"
    OlapError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Code
          enum:
            - INVALID_INPUT
            - NOT_FOUND
            - UNKNOWN
        message:
          type: string
          description: Message

    OlapRaribleStatisticsResponse:
      required:
        - listed
        - minted
        - sold
      type: object
      properties:
        minted:
          type: integer
          description: Amount of minted items (all supported blockchains, all marketplaces)
          format: int64
        sold:
          type: integer
          description: Amount of items sold on rarible
          format: int64
        listed:
          type: integer
          description: Amount of items listed on rarible
          format: int64

    OlapUserLeaderboardEntry:
      required:
        - id
        - items
        - transactions
        - volumeNative
        - volumeUsd
      type: object
      properties:
        id:
          type: string
          description: Identifier of user
        volumeUsd:
          "$ref": '#/components/schemas/OlapCurrencyAmount'
        volumeNative:
          "$ref": '#/components/schemas/OlapCurrencyAmount'
        items:
          type: integer
          description: (non-unique) amount of traded items
          format: int64
        transactions:
          type: integer
          description: Amount of transactions were made
          format: int64

    OlapUserType:
      type: string
      enum:
        - sellers
        - buyers

    OlapPlatformSource:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA

    OlapTradesLeaderboardSort:
      type: string
      default: VOLUME_USD_DESC
      enum:
        - VOLUME_USD_ASC
        - VOLUME_USD_DESC
        - COLLECTION_ASC
        - COLLECTION_DESC
      description: >
        Sort order:
          * `VOLUME_USD_ASC` - sort by usd collection volume, ascending order
          * `VOLUME_USD_DESC` - sort by usd collection volume, descending order
          * `COLLECTION_ASC` - sort by collection id, ascending order
          * `COLLECTION_DESC` - sort by collection id, descending order

    OlapCollectionVolumeRankingResponse:
      type: object
      properties:
        continuation:
          type: string
        result:
          type: array
          items:
            "$ref": "#/components/schemas/OlapCollectionLeaderboardEntry"

    OlapCollectionMintsRankingResponse:
      type: object
      properties:
        continuation:
          type: string
        result:
          type: array
          items:
            "$ref": "#/components/schemas/OlapCollectionMintsLeaderboardEntry"

    OlapCollectionLeaderboardEntry:
      required:
        - id
        - itemsBought
        - listed
        - ownersCount
        - totalItemSupply
        - volumeNative
        - volumeUsd
      type: object
      properties:
        id:
          type: string
          description: Identifier of collection
        volumeUsd:
          "$ref": "#/components/schemas/OlapCurrencyAmountWithChange"
        volumeNative:
          "$ref": "#/components/schemas/OlapCurrencyAmount"
        itemsBought:
          type: integer
          format: int32
        floorPrice:
          "$ref": "#/components/schemas/OlapCurrencyAmountWithChange"
        listed:
          type: integer
          format: int32
        totalItemSupply:
          type: integer
          format: int32
        ownersCount:
          type: integer
          format: int32

    OlapLeaderboardPeriod:
      type: string
      default: D7
      enum:
        - D1
        - D7
        - D30
        - H6
        - H1
        - MIN30
        - MIN5
      description: >
        Period:
          * `D1` - Last 1 day
          * `D7` - Last 7 days
          * `D30` - Last 30 days
          * `H6` - Last 6 hours
          * `H1` - Last 1 hour
          * `MIN30` - Last 30 minutes
          * `MIN5` - Last 5 minutes

    OlapMintsLeaderboardSort:
      type: string
      default: MINTED_DESC
      enum:
        - MINTED_ASC
        - MINTED_DESC
        - COLLECTION_ASC
        - COLLECTION_DESC
      description: >
        Sort order:
          * `MINTED_ASC` - 'minted' amount, ascending order
          * `MINTED_DESC` - 'minted' amount, descending order
          * `COLLECTION_ASC` - sort by collection id, ascending order
          * `COLLECTION_DESC` - sort by collection id, descending order

    OlapCollectionMintsLeaderboardEntry:
      required:
        - id
        - minted
        - totalItemSupply
      type: object
      properties:
        id:
          type: string
          description: Identifier of collection
        minted:
          type: integer
          description: Amount of unique minted nfts for selected period (ERC-1155 and ERC-721 counted once)
          format: int32
        maxSupply:
          type: integer
          description: Total supply of all nfts in collection (ERC-1155 sums all quantities and ERC-721 nfts counted once)
          format: int32
        lastMint:
          type: string
          format: date-time
          description: "Date and time of last mint"
        mintPrice:
          $ref: '#/components/schemas/OlapCurrencyAmount'
        floorPrice:
          $ref: '#/components/schemas/OlapCurrencyAmount'

    OlapStatsGraphResponse:
      required:
        - historicalDates
        - historicalValues
      type: object
      properties:
        historicalDates:
          type: array
          description: Dates of historical statistics
          items:
            type: string
            description: Dates of historical statistics
        historicalValues:
          type: array
          description: Values of historical statistics
          items:
            type: number
            description: Values of historical statistics
            format: bigdecimal
        currentValue:
          type: number
          description: Current value
          format: bigdecimal

    OlapGeneralStatsResponse:
      required:
        - highestSale
        - items
        - listed
        - owners
        - volume
      type: object
      properties:
        highestSale:
          type: number
          description: Highest worth transaction in collection
          format: bigdecimal
        floorPrice:
          type: number
          description: Minimal price of nft in this collection available on rarible
          format: bigdecimal
        marketCap:
          type: number
          description: Market cap of collection (floor price * total item supply)
          format: bigdecimal
        listed:
          type: integer
          description: Amount of currently listed items
          format: int32
        items:
          type: integer
          description: Total item supply of all nfts in the collection
          format: int32
        owners:
          type: integer
          description: Current amount of unique owners who hold nfts of this collection
          format: int32
        volume:
          type: number
          description: Total worth of all transactions were made with nfts in this collection
          format: bigdecimal

    OlapPricesResponse:
      required:
        - avgPrices
        - dates
        - medianPrices
        - minPrices
        - sumPrices
      type: object
      properties:
        dates:
          type: array
          description: Dates of historical statistics
          items:
            type: string
            description: Dates of historical statistics
        avgPrices:
          type: array
          description: Average prices of nfts in this collection for every date
          items:
            type: number
            description: Average price of nfts in this collection for specific date
            format: bigdecimal
        medianPrices:
          type: array
          description: Median prices of nfts in this collection for every date
          items:
            type: number
            description: Median price of nfts in this collection for specific date
            format: bigdecimal
        minPrices:
          type: array
          description: Minimum prices of nfts in this collection for every date
          items:
            type: number
            description: Minimum price of nfts in this collection for specific date
            format: bigdecimal
        sumPrices:
          type: array
          description: Volumes for the collection for every date
          items:
            type: number
            description: Collection volume for specific date
            format: bigdecimal


  #======================== Responses ============================#

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorBadRequest"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorServerError"
    EntityNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorEntityNotFound"
