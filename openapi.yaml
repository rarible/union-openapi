openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Sign API #########################

  "/v0.1/signature/validate":
    post:
      tags:
        - signature-controller
      description: "Validation of the order signature"
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignatureValidationForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Currency API #########################

  "/v0.1/currency/rate/usd":
    get:
      tags:
        - currency-controller
      description: "Get currency USD rate"
      operationId: getCurrencyUsdRate
      parameters:
        - name: blockchain
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            "$ref": "#/components/schemas/Blockchain"
        - name: address
          in: query
          required: true
          description: "Address of the currency"
          schema:
            type: string
        - name: at
          in: query
          required: true
          description: "Date and time for getting currency USD rate"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyUsdRate"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Item API #########################

  /v0.1/items/{itemId}:
    get:
      tags:
        - item-controller
      description: "Returns Item by Id"
      operationId: getItemById
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/items/{itemId}/resetMeta":
    delete:
      tags:
        - item-controller
      description: "Deletes the NFT item meta by Id"
      operationId: resetItemMeta
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byOwner:
    get:
      tags:
        - item-controller
      description: "Returns Item by owner"
      operationId: getItemsByOwner
      parameters:
        - name: "owner"
          in: query
          required: true
          description: "Address of the item owner"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byCreator:
    get:
      tags:
        - item-controller
      description: "Returns Item by creator"
      operationId: getItemsByCreator
      parameters:
        - name: "creator"
          in: query
          required: true
          description: "Address of the item creator"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byCollection:
    get:
      tags:
        - item-controller
      description: "Returns items by collection"
      operationId: getItemsByCollection
      parameters:
        - name: "collection"
          in: query
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/all:
    get:
      tags:
        - item-controller
      description: "Returns all items"
      operationId: getAllItems
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "showDeleted"
          in: query
          required: false
          description: "Include deleted items"
          schema:
            type: boolean
        - name: "lastUpdatedFrom"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated after this date (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "lastUpdatedTo"
          in: query
          required: false
          description: "Filter condition to return only items that have been updated before this date (timestamp)"
          schema:
            type: integer
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Ownership API #######################

  /v0.1/ownerships/{ownershipId}:
    get:
      tags:
        - ownership-controller
      description: "Returns ownership by Id"
      operationId: getOwnershipById
      parameters:
        - name: "ownershipId"
          in: path
          required: true
          description: "Ownership Id in format: '${blockchain}:${token}:${tokenId}:${owner}'"
          schema:
            $ref: "#/components/schemas/OwnershipId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownership"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/ownerships/byItem:
    get:
      tags:
        - ownership-controller
      description: "Returns ownerships by item"
      operationId: getOwnershipsByItem
      parameters:
        - name: "itemId"
          in: query
          required: false
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "contract"
          in: query
          deprecated: true
          required: false
          description: "Address of the contract"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "tokenId"
          in: query
          deprecated: true
          required: false
          description: "Token Id"
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownerships"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/ownerships/all:
    get:
      tags:
        - ownership-controller
      description: "Returns all ownerships"
      operationId: getAllOwnerships
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ownerships"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Order API ########################

  /v0.1/orders/{id}:
    get:
      tags:
        - order-controller
      description: "Returns order by Id"
      operationId: getOrderById
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Order Id, has format '${blockchain}:${id}'"
          schema:
            $ref: "#/components/schemas/OrderId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byIds":
    post:
      tags:
        - order-controller
      description: "Returns the orders that have been put on sale"
      operationId: getOrdersByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/all:
    get:
      tags:
        - order-controller
      description: "Returns all orders"
      operationId: getOrdersAll
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Type of the blockchain network"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "platform"
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell/byMaker:
    get:
      tags:
        - order-controller
      description: "Returns sell orders by maker"
      operationId: getSellOrdersByMaker
      parameters:
        - name: platform
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "maker"
          in: query
          required: true
          description: "The maker of the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell/byItem:
    get:
      tags:
        - order-controller
      description: "Returns sell orders by item"
      operationId: getSellOrdersByItem
      parameters:
        - name: "platform"
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "itemId"
          in: query
          required: false
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "contract"
          in: query
          deprecated: true
          required: false
          description: "Address of the contract"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "tokenId"
          in: query
          deprecated: true
          required: false
          description: "Token Id"
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: "maker"
          in: query
          required: false
          description: "The maker of the bid"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sell:
    get:
      tags:
        - order-controller
      description: "Returns all sell orders"
      operationId: getSellOrders
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "platform"
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  #  /v0.1/orders/bids/byMaker:
  #    get:
  #      tags:
  #        - order-controller
  #      description: "Returns order bids by maker"
  #      operationId: getOrderBidsByMaker
  #      parameters:
  #        - name: platform
  #          in: query
  #          required: false
  #          description: "The platform where the order was created"
  #          schema:
  #            "$ref": "#/components/schemas/Platform"
  #        - name: "maker"
  #          in: query
  #          required: true
  #          description: "The maker of the order"
  #          schema:
  #            $ref: "#/components/schemas/UnionAddress"
  #        - name: "origin"
  #          in: query
  #          required: false
  #          description: "Address of the consumer to receive the commission for the order"
  #          schema:
  #            $ref: "#/components/schemas/UnionAddress"
  #        - name: "status"
  #          in: query
  #          required: false
  #          description: "Order status"
  #          schema:
  #            type: "array"
  #            items:
  #              $ref: "#/components/schemas/OrderStatus"
  #        - name: "start"
  #          in: query
  #          required: false
  #          description: "Lower time border of data (timestamp)"
  #          schema:
  #            type: integer
  #            format: int64
  #        - name: "end"
  #          in: query
  #          required: false
  #          description: "Upper time border of data (timestamp)"
  #          schema:
  #            type: integer
  #            format: int64
  #        - name: "continuation"
  #          in: query
  #          required: false
  #          description: "Continuation token from the previous response"
  #          schema:
  #            type: string
  #        - name: "size"
  #          in: query
  #          required: false
  #          description: "The number of items to return"
  #          schema:
  #            minimum: 1
  #            type: integer
  #            format: int32
  #      responses:
  #        "200":
  #          description: "OK"
  #          content:
  #            application/json:
  #              schema:
  #                $ref: "#/components/schemas/Orders"
  #        '400':
  #          $ref: "#/components/responses/BadRequest"
  #        '500':
  #          $ref: "#/components/responses/ServerError"

  /v0.1/orders/bids/byItem:
    get:
      tags:
        - order-controller
      description: "Returns order bids by item"
      operationId: getOrderBidsByItem
      parameters:
        - name: platform
          in: query
          required: false
          description: "The platform where the order was created"
          schema:
            "$ref": "#/components/schemas/Platform"
        - name: "itemId"
          in: query
          required: false
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "contract"
          in: query
          deprecated: true
          required: false
          description: "Address of the contract"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "tokenId"
          in: query
          deprecated: true
          required: false
          description: "Token Id"
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: "maker"
          in: query
          required: false
          description: "The maker of the bid"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "origin"
          in: query
          required: false
          description: "Address of the consumer to receive the commission for the order"
          schema:
            "$ref": "#/components/schemas/UnionAddress"
        - name: "status"
          in: query
          required: false
          description: "Order status"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/OrderStatus"
        - name: "start"
          in: query
          required: false
          description: "Lower time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "end"
          in: query
          required: false
          description: "Upper time border of data (timestamp)"
          schema:
            type: integer
            format: int64
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Activity API ########################

  /v0.1/activities/byUser:
    get:
      tags:
        - activity-controller
      description: "Returns activities by user"
      operationId: getActivitiesByUser
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/UserActivityType"
        - name: "user"
          in: query
          required: true
          description: "Addresses of the users"
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/UnionAddress"
        - name: "from"
          in: query
          required: false
          description: "Lower time border of data"
          schema:
            type: string
            format: "date-time"
        - name: "to"
          in: query
          required: false
          description: "Upper time border of data"
          schema:
            type: string
            format: "date-time"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byItem:
    get:
      tags:
        - activity-controller
      description: "Returns activities by item"
      operationId: getActivitiesByItem
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "itemId"
          in: query
          required: false
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "contract"
          in: query
          deprecated: true
          required: false
          description: "Address of the contract"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "tokenId"
          in: query
          deprecated: true
          required: false
          description: "Token Id"
          schema:
            $ref: "#/components/schemas/BigInteger"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: sort
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/byCollection:
    get:
      tags:
        - activity-controller
      description: "Returns activities by collection"
      operationId: getActivitiesByCollection
      parameters:
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "collection"
          in: query
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/activities/all:
    get:
      tags:
        - activity-controller
      description: "Returns all activities"
      operationId: getAllActivities
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "type"
          in: query
          required: true
          description: "Activity type"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/ActivityType"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
        - name: "sort"
          in: query
          required: false
          description: "Sorting by data update time"
          schema:
            "$ref": "#/components/schemas/ActivitySort"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ####################### Collection API #######################

  /v0.1/collections/{collection}:
    get:
      tags:
        - collection-controller
      description: "Returns collection by address"
      operationId: getCollectionById
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/byOwner:
    get:
      tags:
        - collection-controller
      description: "Returns collection by owner"
      operationId: getCollectionsByOwner
      parameters:
        - name: "owner"
          in: query
          description: "Owner of searching collections"
          required: true
          schema:
            $ref: "#/components/schemas/UnionAddress"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/collections/all:
    get:
      tags:
        - collection-controller
      description: "Returns all collections"
      operationId: getAllCollections
      parameters:
        - name: "blockchains"
          in: query
          required: false
          description: "Names of the blockchain networks. If no one specified, data from all blockchains will be returned"
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Blockchain"
        - name: "continuation"
          in: query
          required: false
          description: "Continuation token from the previous response"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  schemas:

    Platform:
      type: string
      enum:
        - ALL
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS

    Blockchain:
      type: string
      enum:
        - ETHEREUM
        - POLYGON
        - FLOW
        - TEZOS

    BlockchainGroup:
      type: string
      enum:
        - ETHEREUM
        - FLOW
        - TEZOS

    Payout:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer
      required:
        - account
        - value

    #################### Sign - Union ####################

    SignatureValidationForm:
      required:
        - signer
        - message
        - signature
      type: object
      properties:
        signer:
          $ref: "#/components/schemas/UnionAddress"
        publicKey:
          type: string
          description: "The creator's public key"
        message:
          type: string
        signature:
          type: string
          description: "Digital signature of the signer"

    ################## Currency - Union ##################

    CurrencyUsdRate:
      type: object
      required:
        - currencyId
        - rate
        - date
      properties:
        currencyId:
          type: string
          description: "Currency Id"
        rate:
          $ref: '#/components/schemas/BigDecimal'
        date:
          type: string
          format: date-time
          description: "Date and time of currency USD rate"

    #################### Meta - Union ####################

    Meta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the NFT item"
        description:
          type: string
          description: "Description of the NFT item"
        attributes:
          type: array
          description: "Attributes of the NFT item"
          items:
            "$ref": "#/components/schemas/MetaAttribute"
        content:
          type: array
          description: "NFT content information"
          items:
            $ref: "#/components/schemas/MetaContent"
        raw:
          type: string
      required:
        - name
        - attributes
        - content

    MetaAttribute:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        format:
          type: string

    MetaContent:
      type: object
      properties:
        url:
          type: string
        representation:
          type: string
          enum:
            - PREVIEW
            - BIG
            - ORIGINAL
        mimeType:
          type: string
          example: "image/png"
        size:
          type: integer
          format: int64
      required:
        - url
        - representation

      oneOf:
        - $ref: "#/components/schemas/ImageContent"
        - $ref: "#/components/schemas/VideoContent"

    ImageContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMAGE
        width:
          type: integer
        height:
          type: integer

    VideoContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - VIDEO
        width:
          type: integer
        height:
          type: integer

    #################### Item - Union ####################

    ItemId:
      type: string
      description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
      example: "ETHEREUM:0x60f80121936a0d46b5279700f9df786054aa5ee5:12345"

    Item:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ItemId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        collection: #Deprecated
          $ref: "#/components/schemas/UnionAddress"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        owners:
          type: array
          deprecated: true
          description: "Owners of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/UnionAddress"
        royalties:
          type: array
          description: "List of royalties"
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        lazySupply:
          $ref: "#/components/schemas/BigInteger"
        pending:
          type: array
          description: "Pending information about the item"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemTransfer"
        mintedAt:
          type: string
          format: date-time
          description: "Date and time of the item minting"
        lastUpdatedAt:
          type: string
          format: date-time
          description: "Filter condition to return only items that have been updated at this date"
        supply:
          $ref: "#/components/schemas/BigInteger"
        meta:
          $ref: "#/components/schemas/Meta"
        deleted:
          type: boolean
          description: "Item was deleted or not"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        auctions:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Auction"
        totalStock:
          $ref: "#/components/schemas/BigInteger"
        sellers:
          type: integer
          description: "Was item locked"
      required:
        - id
        - blockchain
        - contract
        - tokenId
        - creators
        - royalties
        - lazySupply
        - pending
        - mintedAt
        - lastUpdatedAt
        - supply
        - deleted
        - sellers
        - auctions

    Items:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: "Number of items were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate items search result"
        items:
          type: array
          description: "List of found items"
          default: [ ]
          items:
            $ref: "#/components/schemas/Item"
      required:
        - total
        - items

    CollectionEvent:
      type: object
      properties:
        collectionId:
          $ref: "#/components/schemas/ContractAddress"
        eventId:
          type: string
      required:
        - eventId
        - collectionId
      oneOf:
        - $ref: "#/components/schemas/CollectionUpdateEvent"

    CollectionUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        collection:
          $ref: "#/components/schemas/Collection"
      required:
        - "@type"
        - collection

    ItemEvent:
      type: object
      properties:
        itemId:
          $ref: "#/components/schemas/ItemId"
        eventId:
          type: string
      required:
        - eventId
        - itemId
      oneOf:
        - $ref: "#/components/schemas/ItemUpdateEvent"
        - $ref: "#/components/schemas/ItemDeleteEvent"

    ItemUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        item:
          $ref: "#/components/schemas/Item"
      required:
        - "@type"
        - item

    ItemDeleteEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"
        - itemId

    #################### Ownership - Union ####################

    OwnershipId:
      type: string
      example: "${blockchain}:${token}:${tokenId}:${owner}"

    Ownership:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OwnershipId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        owner:
          $ref: "#/components/schemas/UnionAddress"
        value:
          $ref: "#/components/schemas/BigInteger"
        createdAt:
          type: string
          format: "date-time"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
        pending:
          type: array
          description: "Pending information about the item"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemHistory"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
      required:
        - id
        - blockchain
        - contract
        - tokenId
        - owner
        - value
        - createdAt
        - creators
        - lazyValue
        - pending

    ItemHistory:
      type: object
      properties:
        owner:
          "$ref": "#/components/schemas/UnionAddress"
        contract:
          "$ref": "#/components/schemas/ContractAddress"
        tokenId:
          "$ref": "#/components/schemas/BigInteger"
        value:
          "$ref": "#/components/schemas/BigInteger"
        date:
          type: string
          format: date-time
      description: History of item
      required:
        - contract
        - tokenId
        - date
      oneOf:
        - "$ref": "#/components/schemas/ItemRoyalty"
        - "$ref": "#/components/schemas/ItemTransfer"

    ItemRoyalty:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ROYALTY
        royalties:
          type: array
          default: [ ]
          items:
            "$ref": "#/components/schemas/Royalty"
      required:
        - "@type"
        - royalties

    ItemTransfer:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          "$ref": "#/components/schemas/UnionAddress"
      required:
        - "@type"
        - owner
        - value
        - from

    Royalty:
      type: object
      required:
        - account
        - value
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer

    Creator:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/UnionAddress"
        value:
          type: integer
      required:
        - account
        - value

    Ownerships:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: "Number of ownerships were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate Ownerships search result"
        ownerships:
          type: array
          default: [ ]
          description: "List of found ownerships"
          items:
            $ref: "#/components/schemas/Ownership"
      required:
        - total
        - ownerships

    OwnershipEvent:
      type: object
      properties:
        ownershipId:
          $ref: "#/components/schemas/OwnershipId"
        eventId:
          type: string
      required:
        - ownershipId
        - eventId
      oneOf:
        - $ref: "#/components/schemas/OwnershipUpdateEvent"
        - $ref: "#/components/schemas/OwnershipDeleteEvent"

    OwnershipUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        ownership:
          $ref: "#/components/schemas/Ownership"
      required:
        - "@type"
        - ownership

    OwnershipDeleteEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"

    #################### Order - Union ####################

    OrderId:
      type: string
      example: "${blockchain}:${id}"

    OrderIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "Array of the orders Ids in format '${blockchain}:${id}'"
          items:
            type: string

    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        fill:
          $ref: "#/components/schemas/BigDecimal"
        platform:
          $ref: "#/components/schemas/Platform"
        status:
          $ref: "#/components/schemas/OrderStatus"
        startedAt:
          type: string
          format: "date-time"
        endedAt:
          type: string
          format: "date-time"
        makeStock:
          $ref: "#/components/schemas/BigDecimal"
        cancelled:
          type: "boolean"
        createdAt:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        makePrice:
          $ref: "#/components/schemas/BigDecimal"
        takePrice:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        priceHistory:
          deprecated: true
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/OrderPriceHistoryRecord"
        maker:
          $ref: "#/components/schemas/UnionAddress"
        taker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        salt:
          type: string
        signature:
          type: string
        pending:
          type: array
          description: "Pending information about the order"
          default: [ ]
          items:
            $ref: "#/components/schemas/PendingOrder"
        data:
          $ref: "#/components/schemas/OrderData"
      required:
        - id
        - platform
        - status
        - fill
        - makeStock
        - cancelled
        - createdAt
        - lastUpdatedAt
        - type
        - maker
        - make
        - take
        - salt
        - data

    OrderData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/EthOrderDataLegacy"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV1"
        - "$ref": "#/components/schemas/EthOrderOpenSeaV1DataV1"
        - "$ref": "#/components/schemas/EthOrderCryptoPunksData"
        - "$ref": "#/components/schemas/TezosOrderDataRaribleV2DataV1"
        - "$ref": "#/components/schemas/FlowOrderDataV1"

    OrderPriceHistoryRecord:
      type: object
      required:
        - date
        - makeValue
        - takeValue
      properties:
        date:
          type: string
          format: date-time
        makeValue:
          $ref: "#/components/schemas/BigDecimal"
        takeValue:
          $ref: "#/components/schemas/BigDecimal"

    Orders:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate Ownerships search result"
        orders:
          type: array
          description: "List of found orders"
          default: [ ]
          items:
            $ref: "#/components/schemas/Order"
      required:
        - total
        - orders

    OrderEvent:
      type: object
      properties:
        orderId:
          "$ref": "#/components/schemas/OrderId"
        eventId:
          type: string
      required:
        - orderId
        - eventId
      oneOf:
        - "$ref": "#/components/schemas/OrderUpdateEvent"

    OrderUpdateEvent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        order:
          "$ref": "#/components/schemas/Order"
      required:
        - "@type"
        - order

    OrderStatus:
      type: string
      enum:
        - ACTIVE
        - FILLED
        - HISTORICAL
        - INACTIVE
        - CANCELLED

    #################### Auction - Union ####################

    AuctionId:
      type: string
      example: "${blockchain}:${id}"

    AuctionHistory:
      type: object
      required:
        - hash
      properties:
        hash:
          type: string

    AuctionStatus:
      type: string
      enum:
        - ACTIVE
        - CANCELLED
        - FINISHED

    RaribleAuctionV1BidDataV1:
      type: object
      required:
        - originFees
        - payouts
      properties:
        dataType:
          type: string
          description: "Data type of the auction bid data"
          enum:
            - RARIBLE_AUCTION_V1_BID_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"

    AuctionBidData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionBid:
      type: object
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/BigDecimal"
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidV1"

    RaribleAuctionV1BidV1:
      type: object
      required:
        - data
      properties:
        type:
          type: string
          description: "Type of the auction bid"
          enum:
            - RARIBLE_AUCTION_V1_BID_V1
        data:
          $ref: "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1DataV1"

    RaribleAuctionV1DataV1:
      type: object
      required:
        - originFees
        - payouts
        - duration
      properties:
        dataType:
          type: string
          description: "Data type of the auction"
          enum:
            - RARIBLE_AUCTION_V1_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        startTime:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/BigInteger"
        buyOutPrice:
          $ref: "#/components/schemas/BigDecimal"

    Auction:
      type: object
      required:
        - id
        - seller
        - sell
        - buy
        - minimalStep
        - minimalPrice
        - createdAt
        - lastUpdateAt
        - status
        - hash
        - auctionId
        - data
      properties:
        id:
          $ref: "#/components/schemas/AuctionId"
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        seller:
          $ref: "#/components/schemas/UnionAddress"
        buyer:
          $ref: "#/components/schemas/UnionAddress"
        sell:
          $ref: "#/components/schemas/Asset"
        buy:
          $ref: "#/components/schemas/AssetType"
        endTime:
          type: string
          format: date-time
        minimalStep:
          $ref: "#/components/schemas/BigDecimal"
        minimalPrice:
          $ref: "#/components/schemas/BigDecimal"
        createdAt:
          type: string
          format: date-time
        lastUpdateAt:
          type: string
          format: date-time
        buyPrice:
          $ref: "#/components/schemas/BigDecimal"
        buyPriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        pending:
          type: array
          items:
            $ref: "#/components/schemas/AuctionHistory"
        status:
          $ref: "#/components/schemas/AuctionStatus"
        hash:
          type: string
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/AuctionBid"
        data:
          $ref: "#/components/schemas/AuctionData"

    RaribleAuctionV1:
      type: object
      required:
        - auctionId
        - data
      properties:
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/RaribleAuctionV1BidV1"
        data:
          $ref: "#/components/schemas/RaribleAuctionV1DataV1"

    #################### Activity - Union ####################

    ActivityId:
      type: string
      example: "${blockchain}:${id}"

    ActivitySort:
      type: string
      enum:
        - LATEST_FIRST
        - EARLIEST_FIRST

    ActivityType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_LIST
        - CANCEL_BID

    UserActivityType:
      type: string
      enum:
        - TRANSFER_FROM
        - TRANSFER_TO
        - MINT
        - BURN
        - MAKE_BID
        - GET_BID
        - LIST
        - BUY
        - SELL
        - CANCEL_LIST
        - CANCEL_BID

    Activity:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ActivityId"
        date:
          type: string
          format: "date-time"
      oneOf:
        - $ref: "#/components/schemas/MintActivity"
        - $ref: "#/components/schemas/BurnActivity"
        - $ref: "#/components/schemas/TransferActivity"
        - $ref: "#/components/schemas/OrderMatchActivity"
        - $ref: "#/components/schemas/OrderBidActivity"
        - $ref: "#/components/schemas/OrderListActivity"
        - $ref: "#/components/schemas/OrderCancelBidActivity"
        - $ref: "#/components/schemas/OrderCancelListActivity"
        - $ref: "#/components/schemas/AuctionOpenActivity"
        - $ref: "#/components/schemas/AuctionBidActivity"
        - $ref: "#/components/schemas/AuctionFinishActivity"
        - $ref: "#/components/schemas/AuctionCancelActivity"
      required:
        - id
        - date

    MintActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MINT
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - contract
        - tokenId
        - value
        - transactionHash

    BurnActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BURN
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - contract
        - tokenId
        - value
        - transactionHash

    TransferActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          $ref: "#/components/schemas/UnionAddress"
        owner:
          $ref: "#/components/schemas/UnionAddress"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - from
        - owner
        - contract
        - tokenId
        - value
        - transactionHash

    OrderActivitySource:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS

    OrderActivityMatchSide:
      type: object
      properties:
        maker:
          $ref: "#/components/schemas/UnionAddress"
        hash:
          type: string
        asset:
          $ref: "#/components/schemas/Asset"
      required:
        - maker
        - asset

    OrderMatchActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MATCH
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - source
        - transactionHash
      oneOf:
        - $ref: "#/components/schemas/OrderMatchSwap"
        - $ref: "#/components/schemas/OrderMatchSell"

    OrderMatchSwap:
      type: object
      required: [left, right]
      properties:
        "@type":
          type: string
          enum:
            - SWAP
        left:
          $ref: "#/components/schemas/OrderActivityMatchSide"
        right:
          $ref: "#/components/schemas/OrderActivityMatchSide"

    OrderMatchSell:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SELL
        nft:
          $ref: "#/components/schemas/Asset"
        payment:
          $ref: "#/components/schemas/Asset"
        buyer:
          $ref: "#/components/schemas/UnionAddress"
        seller:
          $ref: "#/components/schemas/UnionAddress"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        amountUsd:
          $ref: "#/components/schemas/BigDecimal"
        type:
          type: string
          enum:
            - SELL
            - ACCEPT_BID
      required:
        - nft
        - payment
        - price
        - type
        - buyer
        - seller

    OrderBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BID
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - LIST
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderCancelBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_BID
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    OrderCancelListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_LIST
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/UnionAddress"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    AuctionActivitySource:
      type: string
      enum:
        - RARIBLE

    AuctionOpenActivity:
      type: object
      required:
        - "@type"
        - hash
        - seller
        - sell
        - buy
        - minimalStep
        - minimalPrice
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_open"
        seller:
          $ref: "#/components/schemas/UnionAddress"
        sell:
          $ref: "#/components/schemas/Asset"
        buy:
          $ref: "#/components/schemas/AssetType"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/BigInteger"
        minimalStep:
          $ref: "#/components/schemas/BigDecimal"
        minimalPrice:
          $ref: "#/components/schemas/BigDecimal"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
        hash:
          type: string

    AuctionBidActivity:
      type: object
      required:
        - "@type"
        - hash
        - bid
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_bid"
        bid:
          $ref: "#/components/schemas/AuctionBid"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
        hash:
          type: string

    AuctionFinishActivity:
      type: object
      required:
        - "@type"
        - hash
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_finish"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
        hash:
          type: string

    AuctionCancelActivity:
      type: object
      required:
        - "@type"
        - hash
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_cancel"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
        hash:
          type: string

    Activities:
      type: object
      properties:
        continuation:
          type: string
          description: "Continuation token to paginate Ownerships search result"
        activities:
          type: array
          default: [ ]
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/Activity"
      required:
        - total
        - activities

    Collection:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ContractAddress"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        type:
          type: string
          enum:
            - CRYPTO_PUNKS
            - ERC721
            - ERC1155
            - FLOW
            - TEZOS
        name:
          type: string
        symbol:
          type: string
        owner:
          $ref: "#/components/schemas/UnionAddress"
        features:
          type: array
          default: [ ]
          items:
            type: string
            enum:
              - APPROVE_FOR_ALL
              - SET_URI_PREFIX
              - BURN
              - MINT_WITH_ADDRESS
              - SECONDARY_SALE_FEES
              - MINT_AND_TRANSFER
      required:
        - id
        - blockchain
        - name
        - type
        - features

    Collections:
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: "Number of ownerships were found by request"
        continuation:
          type: string
          description: "Continuation token to paginate Ownerships search result"
        collections:
          default: [ ]
          type: array
          items:
            $ref: "#/components/schemas/Collection"
      required:
        - total
        - collections

    ActivityBlockchainInfo:
      type: object
      deprecated: true
      properties:
        transactionHash:
          type: string
        blockHash:
          type: string
        blockNumber:
          type: integer
          format: int64
        logIndex:
          type: integer
      required:
        - transactionHash
        - blockHash
        - blockNumber
        - logIndex

    #################### Union - Errors ####################

    UnionApiErrorEntityNotFound:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
          default: NOT_FOUND
        message:
          type: string
          description: "Error message"

    UnionApiErrorBadRequest:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - VALIDATION
          default: BAD_REQUEST
        message:
          type: string
          description: "Error message"

    UnionApiErrorServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - UNKNOWN
          default: UNKNOWN
        message:
          type: string
          description: "Error message"

    #################### Order - Eth ####################

    EthOrderDataLegacy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V1
        fee:
          $ref: "#/components/schemas/BigInteger"
      required:
        - fee
        - "@type"

    TezosOrderDataRaribleV2DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        makerEdpk:
          type: string
        takerEdpk:
          type: string
      required:
        - "@type"
        - payouts
        - originFees

    EthOrderDataRaribleV2DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    EthOrderOpenSeaV1DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_OPEN_SEA_V1
        exchange:
          $ref: "#/components/schemas/UnionAddress"
        makerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        takerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        makerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        takerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        feeRecipient:
          $ref: "#/components/schemas/UnionAddress"
        feeMethod:
          type: string
          enum:
            - PROTOCOL_FEE
            - SPLIT_FEE
        side:
          type: string
          enum:
            - BUY
            - SELL
        saleKind:
          type: string
          enum:
            - FIXED_PRICE
            - DUTCH_AUCTION
        howToCall:
          type: string
          enum:
            - CALL
            - DELEGATE_CALL
        callData:
          type: string
        replacementPattern:
          type: string
        staticTarget:
          $ref: "#/components/schemas/UnionAddress"
        staticExtraData:
          type: string
        extra:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - dataType
        - exchange
        - makerRelayerFee
        - takerRelayerFee
        - makerProtocolFee
        - takerProtocolFee
        - feeRecipient
        - feeMethod
        - side
        - saleKind
        - howToCall
        - callData
        - replacementPattern
        - staticTarget
        - staticExtraData
        - extra

    EthOrderCryptoPunksData:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_CRYPTO_PUNKS
        stub:
          type: string
          default: "STUB"
      required:
        - "@type"

    PendingOrder:
      type: object
      required:
        - id
        - date
      properties:
        id:
          $ref: "#/components/schemas/OrderId"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        date:
          type: string
          format: date-time
        maker:
          $ref: "#/components/schemas/UnionAddress"
      oneOf:
        - $ref: "#/components/schemas/PendingOrderCancel"
        - $ref: "#/components/schemas/PendingOrderMatch"
        - $ref: "#/components/schemas/OnChainOrder"

    PendingOrderMatch:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ORDER_SIDE_MATCH
        side:
          type: string
          enum:
            - LEFT
            - RIGHT
        fill:
          $ref: "#/components/schemas/BigDecimal"
        taker:
          $ref: "#/components/schemas/UnionAddress"
        counterHash:
          type: string
        makeUsd:
          $ref: "#/components/schemas/BigDecimal"
        takeUsd:
          $ref: "#/components/schemas/BigDecimal"
        makePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        takePriceUsd:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - "@type"
        - fill

    PendingOrderCancel:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL
        owner:
          $ref: "#/components/schemas/UnionAddress"
      required:
        - "@type"

    OnChainOrder:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ON_CHAIN_ORDER
      required:
        - "@type"

    Asset:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - type
        - value

    AssetType:
      type: object
      oneOf:
        - $ref: "#/components/schemas/FlowAssetTypeNft"
        - $ref: "#/components/schemas/FlowAssetTypeFt"
        - $ref: "#/components/schemas/TezosXTZAssetType"
        - $ref: "#/components/schemas/TezosFTAssetType"
        - $ref: "#/components/schemas/TezosNFTAssetType"
        - $ref: "#/components/schemas/TezosMTAssetType"
        - $ref: "#/components/schemas/EthEthereumAssetType"
        - $ref: "#/components/schemas/EthErc20AssetType"
        - $ref: "#/components/schemas/EthErc721AssetType"
        - $ref: "#/components/schemas/EthErc721LazyAssetType"
        - $ref: "#/components/schemas/EthErc1155AssetType"
        - $ref: "#/components/schemas/EthErc1155LazyAssetType"
        - $ref: "#/components/schemas/EthCryptoPunksAssetType"
        - $ref: "#/components/schemas/EthGenerativeArtAssetType"
        - $ref: "#/components/schemas/EthCollectionAssetType"

    TezosXTZAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - XTZ
      required:
        - "@type"

    TezosFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    TezosNFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    TezosMTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_MT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    FlowAssetTypeNft:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - tokenId
        - contract

    FlowAssetTypeFt:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthEthereumAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH
      required:
        - "@type"

    EthErc20AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC20
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthErc721AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc721LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - royalties
        - signatures

    EthErc1155AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc1155LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        supply:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - supply
        - royalties
        - signatures

    EthCryptoPunksAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "CRYPTO_PUNKS"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          type: integer
      required:
        - "@type"
        - contract
        - tokenId

    EthGenerativeArtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "GEN_ART"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthCollectionAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "COLLECTION"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    #################### Order - Flow ####################

    FlowOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_RARIBLE_V1
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    #################### Referenced Types ####################

    BigInteger:
      type: string
      example: 123456
    BigDecimal:
      type: string
      example: 123456.789

    ContractAddress:
      type: string
      description: "Blockchain contract address in Union format `${blockchain}:${token}`"
      example: "POLYGON:0x60f80121c31a0d46b5279700f9df739484aa51111"
    UnionAddress:
      type: string
      description: "Blockchain address in Union format `${blockchainGroup}:${token}`"
      example: "ETHEREUM:0x60f80121c31a0d46b5279700f9df786054aa5ee5"

  #======================== Responses ============================#

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorBadRequest"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorServerError"
    EntityNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorEntityNotFound"
